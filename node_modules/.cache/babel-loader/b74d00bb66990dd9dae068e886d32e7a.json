{"ast":null,"code":"// This file is autogenerated. It's used to publish CJS to npm.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.tinycolor = factory());\n})(this, function () {\n  'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n  } // https://github.com/bgrins/TinyColor\n  // Brian Grinstead, MIT License\n\n\n  var trimLeft = /^\\s+/;\n  var trimRight = /\\s+$/;\n\n  function tinycolor(color, opts) {\n    color = color ? color : \"\";\n    opts = opts || {}; // If input is already a tinycolor, return itself\n\n    if (color instanceof tinycolor) {\n      return color;\n    } // If we are called as a function, call using new instead\n\n\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n\n    if (this._r < 1) this._r = Math.round(this._r);\n    if (this._g < 1) this._g = Math.round(this._g);\n    if (this._b < 1) this._b = Math.round(this._b);\n    this._ok = rgb.ok;\n  }\n\n  tinycolor.prototype = {\n    isDark: function isDark() {\n      return this.getBrightness() < 128;\n    },\n    isLight: function isLight() {\n      return !this.isDark();\n    },\n    isValid: function isValid() {\n      return this._ok;\n    },\n    getOriginalInput: function getOriginalInput() {\n      return this._originalInput;\n    },\n    getFormat: function getFormat() {\n      return this._format;\n    },\n    getAlpha: function getAlpha() {\n      return this._a;\n    },\n    getBrightness: function getBrightness() {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function getLuminance() {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function setAlpha(value) {\n      this._a = boundAlpha(value);\n      this._roundA = Math.round(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function toHsv() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return {\n        h: hsv.h * 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this._a\n      };\n    },\n    toHsvString: function toHsvString() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = Math.round(hsv.h * 360),\n          s = Math.round(hsv.s * 100),\n          v = Math.round(hsv.v * 100);\n      return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n    },\n    toHsl: function toHsl() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return {\n        h: hsl.h * 360,\n        s: hsl.s,\n        l: hsl.l,\n        a: this._a\n      };\n    },\n    toHslString: function toHslString() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = Math.round(hsl.h * 360),\n          s = Math.round(hsl.s * 100),\n          l = Math.round(hsl.l * 100);\n      return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n    },\n    toHex: function toHex(allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function toHexString(allow3Char) {\n      return \"#\" + this.toHex(allow3Char);\n    },\n    toHex8: function toHex8(allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function toHex8String(allow4Char) {\n      return \"#\" + this.toHex8(allow4Char);\n    },\n    toRgb: function toRgb() {\n      return {\n        r: Math.round(this._r),\n        g: Math.round(this._g),\n        b: Math.round(this._b),\n        a: this._a\n      };\n    },\n    toRgbString: function toRgbString() {\n      return this._a == 1 ? \"rgb(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \")\" : \"rgba(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function toPercentageRgb() {\n      return {\n        r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n        g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n        b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n        a: this._a\n      };\n    },\n    toPercentageRgbString: function toPercentageRgbString() {\n      return this._a == 1 ? \"rgb(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function toName() {\n      if (this._a === 0) {\n        return \"transparent\";\n      }\n\n      if (this._a < 1) {\n        return false;\n      }\n\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function toFilter(secondColor) {\n      var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n\n      return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n    },\n    toString: function toString(format) {\n      var formatSet = !!format;\n      format = format || this._format;\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n      if (needsAlphaFormat) {\n        // Special case for \"transparent\", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === \"name\" && this._a === 0) {\n          return this.toName();\n        }\n\n        return this.toRgbString();\n      }\n\n      if (format === \"rgb\") {\n        formattedString = this.toRgbString();\n      }\n\n      if (format === \"prgb\") {\n        formattedString = this.toPercentageRgbString();\n      }\n\n      if (format === \"hex\" || format === \"hex6\") {\n        formattedString = this.toHexString();\n      }\n\n      if (format === \"hex3\") {\n        formattedString = this.toHexString(true);\n      }\n\n      if (format === \"hex4\") {\n        formattedString = this.toHex8String(true);\n      }\n\n      if (format === \"hex8\") {\n        formattedString = this.toHex8String();\n      }\n\n      if (format === \"name\") {\n        formattedString = this.toName();\n      }\n\n      if (format === \"hsl\") {\n        formattedString = this.toHslString();\n      }\n\n      if (format === \"hsv\") {\n        formattedString = this.toHsvString();\n      }\n\n      return formattedString || this.toHexString();\n    },\n    clone: function clone() {\n      return tinycolor(this.toString());\n    },\n    _applyModification: function _applyModification(fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function lighten() {\n      return this._applyModification(_lighten, arguments);\n    },\n    brighten: function brighten() {\n      return this._applyModification(_brighten, arguments);\n    },\n    darken: function darken() {\n      return this._applyModification(_darken, arguments);\n    },\n    desaturate: function desaturate() {\n      return this._applyModification(_desaturate, arguments);\n    },\n    saturate: function saturate() {\n      return this._applyModification(_saturate, arguments);\n    },\n    greyscale: function greyscale() {\n      return this._applyModification(_greyscale, arguments);\n    },\n    spin: function spin() {\n      return this._applyModification(_spin, arguments);\n    },\n    _applyCombination: function _applyCombination(fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function analogous() {\n      return this._applyCombination(_analogous, arguments);\n    },\n    complement: function complement() {\n      return this._applyCombination(_complement, arguments);\n    },\n    monochromatic: function monochromatic() {\n      return this._applyCombination(_monochromatic, arguments);\n    },\n    splitcomplement: function splitcomplement() {\n      return this._applyCombination(_splitcomplement, arguments);\n    },\n    // Disabled until https://github.com/bgrins/TinyColor/issues/254\n    // polyad: function (number) {\n    //   return this._applyCombination(polyad, [number]);\n    // },\n    triad: function triad() {\n      return this._applyCombination(polyad, [3]);\n    },\n    tetrad: function tetrad() {\n      return this._applyCombination(polyad, [4]);\n    }\n  }; // If input is an object, force 1 into \"1.0\" to handle ratios properly\n  // String input requires \"1.0\" as input, so 1 will be treated as 1\n\n  tinycolor.fromRatio = function (color, opts) {\n    if (_typeof(color) == \"object\") {\n      var newColor = {};\n\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === \"a\") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n\n      color = newColor;\n    }\n\n    return tinycolor(color, opts);\n  }; // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     \"red\"\n  //     \"#f00\" or \"f00\"\n  //     \"#ff0000\" or \"ff0000\"\n  //     \"#ff000000\" or \"ff000000\"\n  //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n  //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n  //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n  //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n  //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n  //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n  //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n  //\n\n\n  function inputToRGB(color) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n      color = stringInputToObject(color);\n    }\n\n    if (_typeof(color) == \"object\") {\n      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = \"hsv\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = \"hsl\";\n      }\n\n      if (color.hasOwnProperty(\"a\")) {\n        a = color.a;\n      }\n    }\n\n    a = boundAlpha(a);\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: Math.min(255, Math.max(rgb.r, 0)),\n      g: Math.min(255, Math.max(rgb.g, 0)),\n      b: Math.min(255, Math.max(rgb.b, 0)),\n      a: a\n    };\n  } // Conversion Functions\n  // --------------------\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n\n\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255\n    };\n  } // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n\n\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b),\n        min = Math.min(r, g, b);\n    var h,\n        s,\n        l = (max + min) / 2;\n\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      l: l\n    };\n  } // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n\n\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b),\n        min = Math.min(r, g, b);\n    var h,\n        s,\n        v = max;\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  } // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n\n\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  } // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n\n\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))]; // Return a 3 character hex if possible\n\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n  } // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n\n\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible\n\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n  } // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for \"toFilter()\"\n\n\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n    return hex.join(\"\");\n  } // `equals`\n  // Can be called with any tinycolor input\n\n\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) return false;\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: Math.random(),\n      g: Math.random(),\n      b: Math.random()\n    });\n  }; // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n\n  function _desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function _saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function _greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n\n  function _lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  function _brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n\n  function _darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n\n\n  function _spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  } // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n\n  function _complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n\n  function polyad(color, number) {\n    if (isNaN(number) || number <= 0) {\n      throw new Error(\"Argument to polyad must be a positive number\");\n    }\n\n    var hsl = tinycolor(color).toHsl();\n    var result = [tinycolor(color)];\n    var step = 360 / number;\n\n    for (var i = 1; i < number; i++) {\n      result.push(tinycolor({\n        h: (hsl.h + i * step) % 360,\n        s: hsl.s,\n        l: hsl.l\n      }));\n    }\n\n    return result;\n  }\n\n  function _splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n\n  function _analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n\n    return ret;\n  }\n\n  function _monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n        s = hsv.s,\n        v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n      ret.push(tinycolor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n\n    return ret;\n  } // Utility Functions\n  // ---------------------\n\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return tinycolor(rgba);\n  }; // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n\n\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n  }; // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n  // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n  // *Example*\n  //    tinycolor.isReadable(\"#000\", \"#111\") => false\n  //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n\n\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n    out = false;\n    wcag2Parms = validateWCAG2Parms(wcag2);\n\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case \"AAsmall\":\n      case \"AAAlarge\":\n        out = readability >= 4.5;\n        break;\n\n      case \"AAlarge\":\n        out = readability >= 3;\n        break;\n\n      case \"AAAsmall\":\n        out = readability >= 7;\n        break;\n    }\n\n    return out;\n  }; // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n\n\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\n      level: level,\n      size: size\n    }) || !includeFallbackColors) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n    }\n  }; // Big List of Colors\n  // ------------------\n  // <https://www.w3.org/TR/css-color-4/#named-colors>\n\n\n  var names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n  }; // Make it easy to access colors via `hexNames[hex]`\n\n  var hexNames = tinycolor.hexNames = flip(names); // Utilities\n  // ---------\n  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n\n  function flip(o) {\n    var flipped = {};\n\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n\n    return flipped;\n  } // Return a valid alpha value [0,1] with all invalid values being set to 1\n\n\n  function boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n\n    return a;\n  } // Take input from [0, n] and return it as [0, 1]\n\n\n  function bound01(n, max) {\n    if (isOnePointZero(n)) n = \"100%\";\n    var processPercent = isPercentage(n);\n    n = Math.min(max, Math.max(0, parseFloat(n))); // Automatically convert percentage into number\n\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    } // Handle floating point rounding errors\n\n\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    } // Convert into [0, 1] range if it isn't already\n\n\n    return n % max / parseFloat(max);\n  } // Force a number between 0 and 1\n\n\n  function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n  } // Parse a base-16 hex value into a base-10 integer\n\n\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n\n\n  function isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n  } // Check to see if string passed in is a percentage\n\n\n  function isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n  } // Force a hex value to have 2 characters\n\n\n  function pad2(c) {\n    return c.length == 1 ? \"0\" + c : \"\" + c;\n  } // Replace a decimal with it's percentage value\n\n\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + \"%\";\n    }\n\n    return n;\n  } // Converts a decimal to a hex value\n\n\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  } // Converts a hex value to a decimal\n\n\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n\n  var matchers = function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\"; // <http://www.w3.org/TR/css3-values/#number-value>\n\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\"; // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n      rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n      hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n      hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n      hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n      hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n  }(); // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n\n\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  } // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n\n\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n    var named = false;\n\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == \"transparent\") {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: \"name\"\n      };\n    } // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n\n\n    var match;\n\n    if (match = matchers.rgb.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3]\n      };\n    }\n\n    if (match = matchers.rgba.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsl.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3]\n      };\n    }\n\n    if (match = matchers.hsla.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hsv.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3]\n      };\n    }\n\n    if (match = matchers.hsva.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3],\n        a: match[4]\n      };\n    }\n\n    if (match = matchers.hex8.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n\n    if (match = matchers.hex6.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n\n    if (match = matchers.hex4.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        a: convertHexToDecimal(match[4] + \"\" + match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n\n    if (match = matchers.hex3.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n\n    return false;\n  }\n\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\n      level: \"AA\",\n      size: \"small\"\n    };\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n\n    if (level !== \"AA\" && level !== \"AAA\") {\n      level = \"AA\";\n    }\n\n    if (size !== \"small\" && size !== \"large\") {\n      size = \"small\";\n    }\n\n    return {\n      level: level,\n      size: size\n    };\n  }\n\n  return tinycolor;\n});","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/StudentManagement/StudentManagement/node_modules/tinycolor2/cjs/tinycolor.js"],"names":["global","factory","exports","module","define","amd","globalThis","self","tinycolor","_typeof","obj","Symbol","iterator","constructor","prototype","trimLeft","trimRight","color","opts","rgb","inputToRGB","_originalInput","_r","r","_g","g","_b","b","_a","a","_roundA","Math","round","_format","format","_gradientType","gradientType","_ok","ok","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","toRgb","getLuminance","RsRGB","GsRGB","BsRGB","R","G","B","pow","setAlpha","value","boundAlpha","toHsv","hsv","rgbToHsv","h","s","v","toHsvString","toHsl","hsl","rgbToHsl","l","toHslString","toHex","allow3Char","rgbToHex","toHexString","toHex8","allow4Char","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","bound01","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","rgbaToArgbHex","secondHex8String","toString","formatSet","formattedString","hasAlpha","needsAlphaFormat","clone","_applyModification","fn","args","apply","concat","slice","call","lighten","_lighten","arguments","brighten","_brighten","darken","_darken","desaturate","_desaturate","saturate","_saturate","greyscale","_greyscale","spin","_spin","_applyCombination","analogous","_analogous","complement","_complement","monochromatic","_monochromatic","splitcomplement","_splitcomplement","triad","polyad","tetrad","fromRatio","newColor","i","hasOwnProperty","convertToPercentage","stringInputToObject","isValidCSSUnit","rgbToRgb","String","substr","hsvToRgb","hslToRgb","min","max","d","hue2rgb","p","q","t","floor","f","mod","hex","pad2","charAt","join","convertDecimalToHex","equals","color1","color2","random","amount","clamp01","hue","number","isNaN","Error","result","step","push","results","slices","part","ret","modification","mix","rgb1","rgb2","rgba","readability","c1","c2","isReadable","wcag2","wcag2Parms","out","validateWCAG2Parms","level","size","mostReadable","baseColor","colorList","bestColor","bestScore","includeFallbackColors","length","names","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","flip","o","flipped","parseFloat","n","isOnePointZero","processPercent","isPercentage","parseInt","abs","val","parseIntFromHex","indexOf","c","convertHexToDecimal","matchers","CSS_INTEGER","CSS_NUMBER","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","hsla","hsva","hex3","hex6","hex4","hex8","exec","replace","toLowerCase","named","match","parms","toUpperCase"],"mappings":"AAAA;AACA,CAAC,UAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC1B,SAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DA,MAAM,CAACD,OAAP,GAAiBD,OAAO,EAAvF,GACA,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GAA6CD,MAAM,CAACH,OAAD,CAAnD,IACCD,MAAM,GAAG,OAAOM,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiDN,MAAM,IAAIO,IAApE,EAA0EP,MAAM,CAACQ,SAAP,GAAmBP,OAAO,EADrG,CADA;AAGD,CAJD,EAIG,IAJH,EAIU,YAAY;AAAE;;AAEtB,WAASQ,OAAT,CAAiBC,GAAjB,EAAsB;AACpB;;AAEA,WAAOD,OAAO,GAAG,cAAc,OAAOE,MAArB,IAA+B,YAAY,OAAOA,MAAM,CAACC,QAAzD,GAAoE,UAAUF,GAAV,EAAe;AAClG,aAAO,OAAOA,GAAd;AACD,KAFgB,GAEb,UAAUA,GAAV,EAAe;AACjB,aAAOA,GAAG,IAAI,cAAc,OAAOC,MAA5B,IAAsCD,GAAG,CAACG,WAAJ,KAAoBF,MAA1D,IAAoED,GAAG,KAAKC,MAAM,CAACG,SAAnF,GAA+F,QAA/F,GAA0G,OAAOJ,GAAxH;AACD,KAJM,EAIJD,OAAO,CAACC,GAAD,CAJV;AAKD,GAVmB,CAYpB;AACA;;;AAEA,MAAIK,QAAQ,GAAG,MAAf;AACA,MAAIC,SAAS,GAAG,MAAhB;;AACA,WAASR,SAAT,CAAmBS,KAAnB,EAA0BC,IAA1B,EAAgC;AAC9BD,IAAAA,KAAK,GAAGA,KAAK,GAAGA,KAAH,GAAW,EAAxB;AACAC,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf,CAF8B,CAI9B;;AACA,QAAID,KAAK,YAAYT,SAArB,EAAgC;AAC9B,aAAOS,KAAP;AACD,KAP6B,CAQ9B;;;AACA,QAAI,EAAE,gBAAgBT,SAAlB,CAAJ,EAAkC;AAChC,aAAO,IAAIA,SAAJ,CAAcS,KAAd,EAAqBC,IAArB,CAAP;AACD;;AACD,QAAIC,GAAG,GAAGC,UAAU,CAACH,KAAD,CAApB;AACA,SAAKI,cAAL,GAAsBJ,KAAtB,EAA6B,KAAKK,EAAL,GAAUH,GAAG,CAACI,CAA3C,EAA8C,KAAKC,EAAL,GAAUL,GAAG,CAACM,CAA5D,EAA+D,KAAKC,EAAL,GAAUP,GAAG,CAACQ,CAA7E,EAAgF,KAAKC,EAAL,GAAUT,GAAG,CAACU,CAA9F,EAAiG,KAAKC,OAAL,GAAeC,IAAI,CAACC,KAAL,CAAW,MAAM,KAAKJ,EAAtB,IAA4B,GAA5I,EAAiJ,KAAKK,OAAL,GAAef,IAAI,CAACgB,MAAL,IAAef,GAAG,CAACe,MAAnL;AACA,SAAKC,aAAL,GAAqBjB,IAAI,CAACkB,YAA1B,CAd8B,CAgB9B;AACA;AACA;AACA;;AACA,QAAI,KAAKd,EAAL,GAAU,CAAd,EAAiB,KAAKA,EAAL,GAAUS,IAAI,CAACC,KAAL,CAAW,KAAKV,EAAhB,CAAV;AACjB,QAAI,KAAKE,EAAL,GAAU,CAAd,EAAiB,KAAKA,EAAL,GAAUO,IAAI,CAACC,KAAL,CAAW,KAAKR,EAAhB,CAAV;AACjB,QAAI,KAAKE,EAAL,GAAU,CAAd,EAAiB,KAAKA,EAAL,GAAUK,IAAI,CAACC,KAAL,CAAW,KAAKN,EAAhB,CAAV;AACjB,SAAKW,GAAL,GAAWlB,GAAG,CAACmB,EAAf;AACD;;AACD9B,EAAAA,SAAS,CAACM,SAAV,GAAsB;AACpByB,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,aAAO,KAAKC,aAAL,KAAuB,GAA9B;AACD,KAHmB;AAIpBC,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAO,CAAC,KAAKF,MAAL,EAAR;AACD,KANmB;AAOpBG,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAO,KAAKL,GAAZ;AACD,KATmB;AAUpBM,IAAAA,gBAAgB,EAAE,SAASA,gBAAT,GAA4B;AAC5C,aAAO,KAAKtB,cAAZ;AACD,KAZmB;AAapBuB,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,aAAO,KAAKX,OAAZ;AACD,KAfmB;AAgBpBY,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,aAAO,KAAKjB,EAAZ;AACD,KAlBmB;AAmBpBY,IAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB;AACtC;AACA,UAAIrB,GAAG,GAAG,KAAK2B,KAAL,EAAV;AACA,aAAO,CAAC3B,GAAG,CAACI,CAAJ,GAAQ,GAAR,GAAcJ,GAAG,CAACM,CAAJ,GAAQ,GAAtB,GAA4BN,GAAG,CAACQ,CAAJ,GAAQ,GAArC,IAA4C,IAAnD;AACD,KAvBmB;AAwBpBoB,IAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpC;AACA,UAAI5B,GAAG,GAAG,KAAK2B,KAAL,EAAV;AACA,UAAIE,KAAJ,EAAWC,KAAX,EAAkBC,KAAlB,EAAyBC,CAAzB,EAA4BC,CAA5B,EAA+BC,CAA/B;AACAL,MAAAA,KAAK,GAAG7B,GAAG,CAACI,CAAJ,GAAQ,GAAhB;AACA0B,MAAAA,KAAK,GAAG9B,GAAG,CAACM,CAAJ,GAAQ,GAAhB;AACAyB,MAAAA,KAAK,GAAG/B,GAAG,CAACQ,CAAJ,GAAQ,GAAhB;AACA,UAAIqB,KAAK,IAAI,OAAb,EAAsBG,CAAC,GAAGH,KAAK,GAAG,KAAZ,CAAtB,KAA6CG,CAAC,GAAGpB,IAAI,CAACuB,GAAL,CAAS,CAACN,KAAK,GAAG,KAAT,IAAkB,KAA3B,EAAkC,GAAlC,CAAJ;AAC7C,UAAIC,KAAK,IAAI,OAAb,EAAsBG,CAAC,GAAGH,KAAK,GAAG,KAAZ,CAAtB,KAA6CG,CAAC,GAAGrB,IAAI,CAACuB,GAAL,CAAS,CAACL,KAAK,GAAG,KAAT,IAAkB,KAA3B,EAAkC,GAAlC,CAAJ;AAC7C,UAAIC,KAAK,IAAI,OAAb,EAAsBG,CAAC,GAAGH,KAAK,GAAG,KAAZ,CAAtB,KAA6CG,CAAC,GAAGtB,IAAI,CAACuB,GAAL,CAAS,CAACJ,KAAK,GAAG,KAAT,IAAkB,KAA3B,EAAkC,GAAlC,CAAJ;AAC7C,aAAO,SAASC,CAAT,GAAa,SAASC,CAAtB,GAA0B,SAASC,CAA1C;AACD,KAnCmB;AAoCpBE,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACjC,WAAK5B,EAAL,GAAU6B,UAAU,CAACD,KAAD,CAApB;AACA,WAAK1B,OAAL,GAAeC,IAAI,CAACC,KAAL,CAAW,MAAM,KAAKJ,EAAtB,IAA4B,GAA3C;AACA,aAAO,IAAP;AACD,KAxCmB;AAyCpB8B,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,UAAIC,GAAG,GAAGC,QAAQ,CAAC,KAAKtC,EAAN,EAAU,KAAKE,EAAf,EAAmB,KAAKE,EAAxB,CAAlB;AACA,aAAO;AACLmC,QAAAA,CAAC,EAAEF,GAAG,CAACE,CAAJ,GAAQ,GADN;AAELC,QAAAA,CAAC,EAAEH,GAAG,CAACG,CAFF;AAGLC,QAAAA,CAAC,EAAEJ,GAAG,CAACI,CAHF;AAILlC,QAAAA,CAAC,EAAE,KAAKD;AAJH,OAAP;AAMD,KAjDmB;AAkDpBoC,IAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,UAAIL,GAAG,GAAGC,QAAQ,CAAC,KAAKtC,EAAN,EAAU,KAAKE,EAAf,EAAmB,KAAKE,EAAxB,CAAlB;AACA,UAAImC,CAAC,GAAG9B,IAAI,CAACC,KAAL,CAAW2B,GAAG,CAACE,CAAJ,GAAQ,GAAnB,CAAR;AAAA,UACEC,CAAC,GAAG/B,IAAI,CAACC,KAAL,CAAW2B,GAAG,CAACG,CAAJ,GAAQ,GAAnB,CADN;AAAA,UAEEC,CAAC,GAAGhC,IAAI,CAACC,KAAL,CAAW2B,GAAG,CAACI,CAAJ,GAAQ,GAAnB,CAFN;AAGA,aAAO,KAAKnC,EAAL,IAAW,CAAX,GAAe,SAASiC,CAAT,GAAa,IAAb,GAAoBC,CAApB,GAAwB,KAAxB,GAAgCC,CAAhC,GAAoC,IAAnD,GAA0D,UAAUF,CAAV,GAAc,IAAd,GAAqBC,CAArB,GAAyB,KAAzB,GAAiCC,CAAjC,GAAqC,KAArC,GAA6C,KAAKjC,OAAlD,GAA4D,GAA7H;AACD,KAxDmB;AAyDpBmC,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,UAAIC,GAAG,GAAGC,QAAQ,CAAC,KAAK7C,EAAN,EAAU,KAAKE,EAAf,EAAmB,KAAKE,EAAxB,CAAlB;AACA,aAAO;AACLmC,QAAAA,CAAC,EAAEK,GAAG,CAACL,CAAJ,GAAQ,GADN;AAELC,QAAAA,CAAC,EAAEI,GAAG,CAACJ,CAFF;AAGLM,QAAAA,CAAC,EAAEF,GAAG,CAACE,CAHF;AAILvC,QAAAA,CAAC,EAAE,KAAKD;AAJH,OAAP;AAMD,KAjEmB;AAkEpByC,IAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,UAAIH,GAAG,GAAGC,QAAQ,CAAC,KAAK7C,EAAN,EAAU,KAAKE,EAAf,EAAmB,KAAKE,EAAxB,CAAlB;AACA,UAAImC,CAAC,GAAG9B,IAAI,CAACC,KAAL,CAAWkC,GAAG,CAACL,CAAJ,GAAQ,GAAnB,CAAR;AAAA,UACEC,CAAC,GAAG/B,IAAI,CAACC,KAAL,CAAWkC,GAAG,CAACJ,CAAJ,GAAQ,GAAnB,CADN;AAAA,UAEEM,CAAC,GAAGrC,IAAI,CAACC,KAAL,CAAWkC,GAAG,CAACE,CAAJ,GAAQ,GAAnB,CAFN;AAGA,aAAO,KAAKxC,EAAL,IAAW,CAAX,GAAe,SAASiC,CAAT,GAAa,IAAb,GAAoBC,CAApB,GAAwB,KAAxB,GAAgCM,CAAhC,GAAoC,IAAnD,GAA0D,UAAUP,CAAV,GAAc,IAAd,GAAqBC,CAArB,GAAyB,KAAzB,GAAiCM,CAAjC,GAAqC,KAArC,GAA6C,KAAKtC,OAAlD,GAA4D,GAA7H;AACD,KAxEmB;AAyEpBwC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,UAAf,EAA2B;AAChC,aAAOC,QAAQ,CAAC,KAAKlD,EAAN,EAAU,KAAKE,EAAf,EAAmB,KAAKE,EAAxB,EAA4B6C,UAA5B,CAAf;AACD,KA3EmB;AA4EpBE,IAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBF,UAArB,EAAiC;AAC5C,aAAO,MAAM,KAAKD,KAAL,CAAWC,UAAX,CAAb;AACD,KA9EmB;AA+EpBG,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,UAAhB,EAA4B;AAClC,aAAOC,SAAS,CAAC,KAAKtD,EAAN,EAAU,KAAKE,EAAf,EAAmB,KAAKE,EAAxB,EAA4B,KAAKE,EAAjC,EAAqC+C,UAArC,CAAhB;AACD,KAjFmB;AAkFpBE,IAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBF,UAAtB,EAAkC;AAC9C,aAAO,MAAM,KAAKD,MAAL,CAAYC,UAAZ,CAAb;AACD,KApFmB;AAqFpB7B,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,aAAO;AACLvB,QAAAA,CAAC,EAAEQ,IAAI,CAACC,KAAL,CAAW,KAAKV,EAAhB,CADE;AAELG,QAAAA,CAAC,EAAEM,IAAI,CAACC,KAAL,CAAW,KAAKR,EAAhB,CAFE;AAGLG,QAAAA,CAAC,EAAEI,IAAI,CAACC,KAAL,CAAW,KAAKN,EAAhB,CAHE;AAILG,QAAAA,CAAC,EAAE,KAAKD;AAJH,OAAP;AAMD,KA5FmB;AA6FpBkD,IAAAA,WAAW,EAAE,SAASA,WAAT,GAAuB;AAClC,aAAO,KAAKlD,EAAL,IAAW,CAAX,GAAe,SAASG,IAAI,CAACC,KAAL,CAAW,KAAKV,EAAhB,CAAT,GAA+B,IAA/B,GAAsCS,IAAI,CAACC,KAAL,CAAW,KAAKR,EAAhB,CAAtC,GAA4D,IAA5D,GAAmEO,IAAI,CAACC,KAAL,CAAW,KAAKN,EAAhB,CAAnE,GAAyF,GAAxG,GAA8G,UAAUK,IAAI,CAACC,KAAL,CAAW,KAAKV,EAAhB,CAAV,GAAgC,IAAhC,GAAuCS,IAAI,CAACC,KAAL,CAAW,KAAKR,EAAhB,CAAvC,GAA6D,IAA7D,GAAoEO,IAAI,CAACC,KAAL,CAAW,KAAKN,EAAhB,CAApE,GAA0F,IAA1F,GAAiG,KAAKI,OAAtG,GAAgH,GAArO;AACD,KA/FmB;AAgGpBiD,IAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B;AAC1C,aAAO;AACLxD,QAAAA,CAAC,EAAEQ,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAK1D,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,IAA0C,GADxC;AAELG,QAAAA,CAAC,EAAEM,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAKxD,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,IAA0C,GAFxC;AAGLG,QAAAA,CAAC,EAAEI,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAKtD,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,IAA0C,GAHxC;AAILG,QAAAA,CAAC,EAAE,KAAKD;AAJH,OAAP;AAMD,KAvGmB;AAwGpBqD,IAAAA,qBAAqB,EAAE,SAASA,qBAAT,GAAiC;AACtD,aAAO,KAAKrD,EAAL,IAAW,CAAX,GAAe,SAASG,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAK1D,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,CAAT,GAAmD,KAAnD,GAA2DS,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAKxD,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,CAA3D,GAAqG,KAArG,GAA6GO,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAKtD,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,CAA7G,GAAuJ,IAAtK,GAA6K,UAAUK,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAK1D,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,CAAV,GAAoD,KAApD,GAA4DS,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAKxD,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,CAA5D,GAAsG,KAAtG,GAA8GO,IAAI,CAACC,KAAL,CAAWgD,OAAO,CAAC,KAAKtD,EAAN,EAAU,GAAV,CAAP,GAAwB,GAAnC,CAA9G,GAAwJ,KAAxJ,GAAgK,KAAKI,OAArK,GAA+K,GAAnW;AACD,KA1GmB;AA2GpBoD,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,UAAI,KAAKtD,EAAL,KAAY,CAAhB,EAAmB;AACjB,eAAO,aAAP;AACD;;AACD,UAAI,KAAKA,EAAL,GAAU,CAAd,EAAiB;AACf,eAAO,KAAP;AACD;;AACD,aAAOuD,QAAQ,CAACX,QAAQ,CAAC,KAAKlD,EAAN,EAAU,KAAKE,EAAf,EAAmB,KAAKE,EAAxB,EAA4B,IAA5B,CAAT,CAAR,IAAuD,KAA9D;AACD,KAnHmB;AAoHpB0D,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBC,WAAlB,EAA+B;AACvC,UAAIC,UAAU,GAAG,MAAMC,aAAa,CAAC,KAAKjE,EAAN,EAAU,KAAKE,EAAf,EAAmB,KAAKE,EAAxB,EAA4B,KAAKE,EAAjC,CAApC;AACA,UAAI4D,gBAAgB,GAAGF,UAAvB;AACA,UAAIlD,YAAY,GAAG,KAAKD,aAAL,GAAqB,oBAArB,GAA4C,EAA/D;;AACA,UAAIkD,WAAJ,EAAiB;AACf,YAAIvB,CAAC,GAAGtD,SAAS,CAAC6E,WAAD,CAAjB;AACAG,QAAAA,gBAAgB,GAAG,MAAMD,aAAa,CAACzB,CAAC,CAACxC,EAAH,EAAOwC,CAAC,CAACtC,EAAT,EAAasC,CAAC,CAACpC,EAAf,EAAmBoC,CAAC,CAAClC,EAArB,CAAtC;AACD;;AACD,aAAO,gDAAgDQ,YAAhD,GAA+D,gBAA/D,GAAkFkD,UAAlF,GAA+F,eAA/F,GAAiHE,gBAAjH,GAAoI,GAA3I;AACD,KA7HmB;AA8HpBC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBvD,MAAlB,EAA0B;AAClC,UAAIwD,SAAS,GAAG,CAAC,CAACxD,MAAlB;AACAA,MAAAA,MAAM,GAAGA,MAAM,IAAI,KAAKD,OAAxB;AACA,UAAI0D,eAAe,GAAG,KAAtB;AACA,UAAIC,QAAQ,GAAG,KAAKhE,EAAL,GAAU,CAAV,IAAe,KAAKA,EAAL,IAAW,CAAzC;AACA,UAAIiE,gBAAgB,GAAG,CAACH,SAAD,IAAcE,QAAd,KAA2B1D,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,MAA/B,IAAyCA,MAAM,KAAK,MAApD,IAA8DA,MAAM,KAAK,MAAzE,IAAmFA,MAAM,KAAK,MAA9F,IAAwGA,MAAM,KAAK,MAA9I,CAAvB;;AACA,UAAI2D,gBAAJ,EAAsB;AACpB;AACA;AACA,YAAI3D,MAAM,KAAK,MAAX,IAAqB,KAAKN,EAAL,KAAY,CAArC,EAAwC;AACtC,iBAAO,KAAKsD,MAAL,EAAP;AACD;;AACD,eAAO,KAAKJ,WAAL,EAAP;AACD;;AACD,UAAI5C,MAAM,KAAK,KAAf,EAAsB;AACpByD,QAAAA,eAAe,GAAG,KAAKb,WAAL,EAAlB;AACD;;AACD,UAAI5C,MAAM,KAAK,MAAf,EAAuB;AACrByD,QAAAA,eAAe,GAAG,KAAKV,qBAAL,EAAlB;AACD;;AACD,UAAI/C,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,MAAnC,EAA2C;AACzCyD,QAAAA,eAAe,GAAG,KAAKlB,WAAL,EAAlB;AACD;;AACD,UAAIvC,MAAM,KAAK,MAAf,EAAuB;AACrByD,QAAAA,eAAe,GAAG,KAAKlB,WAAL,CAAiB,IAAjB,CAAlB;AACD;;AACD,UAAIvC,MAAM,KAAK,MAAf,EAAuB;AACrByD,QAAAA,eAAe,GAAG,KAAKd,YAAL,CAAkB,IAAlB,CAAlB;AACD;;AACD,UAAI3C,MAAM,KAAK,MAAf,EAAuB;AACrByD,QAAAA,eAAe,GAAG,KAAKd,YAAL,EAAlB;AACD;;AACD,UAAI3C,MAAM,KAAK,MAAf,EAAuB;AACrByD,QAAAA,eAAe,GAAG,KAAKT,MAAL,EAAlB;AACD;;AACD,UAAIhD,MAAM,KAAK,KAAf,EAAsB;AACpByD,QAAAA,eAAe,GAAG,KAAKtB,WAAL,EAAlB;AACD;;AACD,UAAInC,MAAM,KAAK,KAAf,EAAsB;AACpByD,QAAAA,eAAe,GAAG,KAAK3B,WAAL,EAAlB;AACD;;AACD,aAAO2B,eAAe,IAAI,KAAKlB,WAAL,EAA1B;AACD,KAxKmB;AAyKpBqB,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,aAAOtF,SAAS,CAAC,KAAKiF,QAAL,EAAD,CAAhB;AACD,KA3KmB;AA4KpBM,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,EAA5B,EAAgCC,IAAhC,EAAsC;AACxD,UAAIhF,KAAK,GAAG+E,EAAE,CAACE,KAAH,CAAS,IAAT,EAAe,CAAC,IAAD,EAAOC,MAAP,CAAc,GAAGC,KAAH,CAASC,IAAT,CAAcJ,IAAd,CAAd,CAAf,CAAZ;AACA,WAAK3E,EAAL,GAAUL,KAAK,CAACK,EAAhB;AACA,WAAKE,EAAL,GAAUP,KAAK,CAACO,EAAhB;AACA,WAAKE,EAAL,GAAUT,KAAK,CAACS,EAAhB;AACA,WAAK6B,QAAL,CAActC,KAAK,CAACW,EAApB;AACA,aAAO,IAAP;AACD,KAnLmB;AAoLpB0E,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,aAAO,KAAKP,kBAAL,CAAwBQ,QAAxB,EAAkCC,SAAlC,CAAP;AACD,KAtLmB;AAuLpBC,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,aAAO,KAAKV,kBAAL,CAAwBW,SAAxB,EAAmCF,SAAnC,CAAP;AACD,KAzLmB;AA0LpBG,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,aAAO,KAAKZ,kBAAL,CAAwBa,OAAxB,EAAiCJ,SAAjC,CAAP;AACD,KA5LmB;AA6LpBK,IAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,aAAO,KAAKd,kBAAL,CAAwBe,WAAxB,EAAqCN,SAArC,CAAP;AACD,KA/LmB;AAgMpBO,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,aAAO,KAAKhB,kBAAL,CAAwBiB,SAAxB,EAAmCR,SAAnC,CAAP;AACD,KAlMmB;AAmMpBS,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,aAAO,KAAKlB,kBAAL,CAAwBmB,UAAxB,EAAoCV,SAApC,CAAP;AACD,KArMmB;AAsMpBW,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,aAAO,KAAKpB,kBAAL,CAAwBqB,KAAxB,EAA+BZ,SAA/B,CAAP;AACD,KAxMmB;AAyMpBa,IAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BrB,EAA3B,EAA+BC,IAA/B,EAAqC;AACtD,aAAOD,EAAE,CAACE,KAAH,CAAS,IAAT,EAAe,CAAC,IAAD,EAAOC,MAAP,CAAc,GAAGC,KAAH,CAASC,IAAT,CAAcJ,IAAd,CAAd,CAAf,CAAP;AACD,KA3MmB;AA4MpBqB,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,aAAO,KAAKD,iBAAL,CAAuBE,UAAvB,EAAmCf,SAAnC,CAAP;AACD,KA9MmB;AA+MpBgB,IAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,aAAO,KAAKH,iBAAL,CAAuBI,WAAvB,EAAoCjB,SAApC,CAAP;AACD,KAjNmB;AAkNpBkB,IAAAA,aAAa,EAAE,SAASA,aAAT,GAAyB;AACtC,aAAO,KAAKL,iBAAL,CAAuBM,cAAvB,EAAuCnB,SAAvC,CAAP;AACD,KApNmB;AAqNpBoB,IAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B;AAC1C,aAAO,KAAKP,iBAAL,CAAuBQ,gBAAvB,EAAyCrB,SAAzC,CAAP;AACD,KAvNmB;AAwNpB;AACA;AACA;AACA;AACAsB,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,aAAO,KAAKT,iBAAL,CAAuBU,MAAvB,EAA+B,CAAC,CAAD,CAA/B,CAAP;AACD,KA9NmB;AA+NpBC,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,aAAO,KAAKX,iBAAL,CAAuBU,MAAvB,EAA+B,CAAC,CAAD,CAA/B,CAAP;AACD;AAjOmB,GAAtB,CA1CoB,CA8QpB;AACA;;AACAvH,EAAAA,SAAS,CAACyH,SAAV,GAAsB,UAAUhH,KAAV,EAAiBC,IAAjB,EAAuB;AAC3C,QAAIT,OAAO,CAACQ,KAAD,CAAP,IAAkB,QAAtB,EAAgC;AAC9B,UAAIiH,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAT,IAAclH,KAAd,EAAqB;AACnB,YAAIA,KAAK,CAACmH,cAAN,CAAqBD,CAArB,CAAJ,EAA6B;AAC3B,cAAIA,CAAC,KAAK,GAAV,EAAe;AACbD,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAclH,KAAK,CAACkH,CAAD,CAAnB;AACD,WAFD,MAEO;AACLD,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcE,mBAAmB,CAACpH,KAAK,CAACkH,CAAD,CAAN,CAAjC;AACD;AACF;AACF;;AACDlH,MAAAA,KAAK,GAAGiH,QAAR;AACD;;AACD,WAAO1H,SAAS,CAACS,KAAD,EAAQC,IAAR,CAAhB;AACD,GAfD,CAhRoB,CAiSpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAASE,UAAT,CAAoBH,KAApB,EAA2B;AACzB,QAAIE,GAAG,GAAG;AACRI,MAAAA,CAAC,EAAE,CADK;AAERE,MAAAA,CAAC,EAAE,CAFK;AAGRE,MAAAA,CAAC,EAAE;AAHK,KAAV;AAKA,QAAIE,CAAC,GAAG,CAAR;AACA,QAAIiC,CAAC,GAAG,IAAR;AACA,QAAIC,CAAC,GAAG,IAAR;AACA,QAAIK,CAAC,GAAG,IAAR;AACA,QAAI9B,EAAE,GAAG,KAAT;AACA,QAAIJ,MAAM,GAAG,KAAb;;AACA,QAAI,OAAOjB,KAAP,IAAgB,QAApB,EAA8B;AAC5BA,MAAAA,KAAK,GAAGqH,mBAAmB,CAACrH,KAAD,CAA3B;AACD;;AACD,QAAIR,OAAO,CAACQ,KAAD,CAAP,IAAkB,QAAtB,EAAgC;AAC9B,UAAIsH,cAAc,CAACtH,KAAK,CAACM,CAAP,CAAd,IAA2BgH,cAAc,CAACtH,KAAK,CAACQ,CAAP,CAAzC,IAAsD8G,cAAc,CAACtH,KAAK,CAACU,CAAP,CAAxE,EAAmF;AACjFR,QAAAA,GAAG,GAAGqH,QAAQ,CAACvH,KAAK,CAACM,CAAP,EAAUN,KAAK,CAACQ,CAAhB,EAAmBR,KAAK,CAACU,CAAzB,CAAd;AACAW,QAAAA,EAAE,GAAG,IAAL;AACAJ,QAAAA,MAAM,GAAGuG,MAAM,CAACxH,KAAK,CAACM,CAAP,CAAN,CAAgBmH,MAAhB,CAAuB,CAAC,CAAxB,MAA+B,GAA/B,GAAqC,MAArC,GAA8C,KAAvD;AACD,OAJD,MAIO,IAAIH,cAAc,CAACtH,KAAK,CAAC4C,CAAP,CAAd,IAA2B0E,cAAc,CAACtH,KAAK,CAAC6C,CAAP,CAAzC,IAAsDyE,cAAc,CAACtH,KAAK,CAAC8C,CAAP,CAAxE,EAAmF;AACxFD,QAAAA,CAAC,GAAGuE,mBAAmB,CAACpH,KAAK,CAAC6C,CAAP,CAAvB;AACAC,QAAAA,CAAC,GAAGsE,mBAAmB,CAACpH,KAAK,CAAC8C,CAAP,CAAvB;AACA5C,QAAAA,GAAG,GAAGwH,QAAQ,CAAC1H,KAAK,CAAC4C,CAAP,EAAUC,CAAV,EAAaC,CAAb,CAAd;AACAzB,QAAAA,EAAE,GAAG,IAAL;AACAJ,QAAAA,MAAM,GAAG,KAAT;AACD,OANM,MAMA,IAAIqG,cAAc,CAACtH,KAAK,CAAC4C,CAAP,CAAd,IAA2B0E,cAAc,CAACtH,KAAK,CAAC6C,CAAP,CAAzC,IAAsDyE,cAAc,CAACtH,KAAK,CAACmD,CAAP,CAAxE,EAAmF;AACxFN,QAAAA,CAAC,GAAGuE,mBAAmB,CAACpH,KAAK,CAAC6C,CAAP,CAAvB;AACAM,QAAAA,CAAC,GAAGiE,mBAAmB,CAACpH,KAAK,CAACmD,CAAP,CAAvB;AACAjD,QAAAA,GAAG,GAAGyH,QAAQ,CAAC3H,KAAK,CAAC4C,CAAP,EAAUC,CAAV,EAAaM,CAAb,CAAd;AACA9B,QAAAA,EAAE,GAAG,IAAL;AACAJ,QAAAA,MAAM,GAAG,KAAT;AACD;;AACD,UAAIjB,KAAK,CAACmH,cAAN,CAAqB,GAArB,CAAJ,EAA+B;AAC7BvG,QAAAA,CAAC,GAAGZ,KAAK,CAACY,CAAV;AACD;AACF;;AACDA,IAAAA,CAAC,GAAG4B,UAAU,CAAC5B,CAAD,CAAd;AACA,WAAO;AACLS,MAAAA,EAAE,EAAEA,EADC;AAELJ,MAAAA,MAAM,EAAEjB,KAAK,CAACiB,MAAN,IAAgBA,MAFnB;AAGLX,MAAAA,CAAC,EAAEQ,IAAI,CAAC8G,GAAL,CAAS,GAAT,EAAc9G,IAAI,CAAC+G,GAAL,CAAS3H,GAAG,CAACI,CAAb,EAAgB,CAAhB,CAAd,CAHE;AAILE,MAAAA,CAAC,EAAEM,IAAI,CAAC8G,GAAL,CAAS,GAAT,EAAc9G,IAAI,CAAC+G,GAAL,CAAS3H,GAAG,CAACM,CAAb,EAAgB,CAAhB,CAAd,CAJE;AAKLE,MAAAA,CAAC,EAAEI,IAAI,CAAC8G,GAAL,CAAS,GAAT,EAAc9G,IAAI,CAAC+G,GAAL,CAAS3H,GAAG,CAACQ,CAAb,EAAgB,CAAhB,CAAd,CALE;AAMLE,MAAAA,CAAC,EAAEA;AANE,KAAP;AAQD,GA9VmB,CAgWpB;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA,WAAS2G,QAAT,CAAkBjH,CAAlB,EAAqBE,CAArB,EAAwBE,CAAxB,EAA2B;AACzB,WAAO;AACLJ,MAAAA,CAAC,EAAEyD,OAAO,CAACzD,CAAD,EAAI,GAAJ,CAAP,GAAkB,GADhB;AAELE,MAAAA,CAAC,EAAEuD,OAAO,CAACvD,CAAD,EAAI,GAAJ,CAAP,GAAkB,GAFhB;AAGLE,MAAAA,CAAC,EAAEqD,OAAO,CAACrD,CAAD,EAAI,GAAJ,CAAP,GAAkB;AAHhB,KAAP;AAKD,GAjXmB,CAmXpB;AACA;AACA;AACA;;;AACA,WAASwC,QAAT,CAAkB5C,CAAlB,EAAqBE,CAArB,EAAwBE,CAAxB,EAA2B;AACzBJ,IAAAA,CAAC,GAAGyD,OAAO,CAACzD,CAAD,EAAI,GAAJ,CAAX;AACAE,IAAAA,CAAC,GAAGuD,OAAO,CAACvD,CAAD,EAAI,GAAJ,CAAX;AACAE,IAAAA,CAAC,GAAGqD,OAAO,CAACrD,CAAD,EAAI,GAAJ,CAAX;AACA,QAAImH,GAAG,GAAG/G,IAAI,CAAC+G,GAAL,CAASvH,CAAT,EAAYE,CAAZ,EAAeE,CAAf,CAAV;AAAA,QACEkH,GAAG,GAAG9G,IAAI,CAAC8G,GAAL,CAAStH,CAAT,EAAYE,CAAZ,EAAeE,CAAf,CADR;AAEA,QAAIkC,CAAJ;AAAA,QACEC,CADF;AAAA,QAEEM,CAAC,GAAG,CAAC0E,GAAG,GAAGD,GAAP,IAAc,CAFpB;;AAGA,QAAIC,GAAG,IAAID,GAAX,EAAgB;AACdhF,MAAAA,CAAC,GAAGC,CAAC,GAAG,CAAR,CADc,CACH;AACZ,KAFD,MAEO;AACL,UAAIiF,CAAC,GAAGD,GAAG,GAAGD,GAAd;AACA/E,MAAAA,CAAC,GAAGM,CAAC,GAAG,GAAJ,GAAU2E,CAAC,IAAI,IAAID,GAAJ,GAAUD,GAAd,CAAX,GAAgCE,CAAC,IAAID,GAAG,GAAGD,GAAV,CAArC;;AACA,cAAQC,GAAR;AACE,aAAKvH,CAAL;AACEsC,UAAAA,CAAC,GAAG,CAACpC,CAAC,GAAGE,CAAL,IAAUoH,CAAV,IAAetH,CAAC,GAAGE,CAAJ,GAAQ,CAAR,GAAY,CAA3B,CAAJ;AACA;;AACF,aAAKF,CAAL;AACEoC,UAAAA,CAAC,GAAG,CAAClC,CAAC,GAAGJ,CAAL,IAAUwH,CAAV,GAAc,CAAlB;AACA;;AACF,aAAKpH,CAAL;AACEkC,UAAAA,CAAC,GAAG,CAACtC,CAAC,GAAGE,CAAL,IAAUsH,CAAV,GAAc,CAAlB;AACA;AATJ;;AAWAlF,MAAAA,CAAC,IAAI,CAAL;AACD;;AACD,WAAO;AACLA,MAAAA,CAAC,EAAEA,CADE;AAELC,MAAAA,CAAC,EAAEA,CAFE;AAGLM,MAAAA,CAAC,EAAEA;AAHE,KAAP;AAKD,GAvZmB,CAyZpB;AACA;AACA;AACA;;;AACA,WAASwE,QAAT,CAAkB/E,CAAlB,EAAqBC,CAArB,EAAwBM,CAAxB,EAA2B;AACzB,QAAI7C,CAAJ,EAAOE,CAAP,EAAUE,CAAV;AACAkC,IAAAA,CAAC,GAAGmB,OAAO,CAACnB,CAAD,EAAI,GAAJ,CAAX;AACAC,IAAAA,CAAC,GAAGkB,OAAO,CAAClB,CAAD,EAAI,GAAJ,CAAX;AACAM,IAAAA,CAAC,GAAGY,OAAO,CAACZ,CAAD,EAAI,GAAJ,CAAX;;AACA,aAAS4E,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,UAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,IAAI,CAAL;AACX,UAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,IAAI,CAAL;AACX,UAAIA,CAAC,GAAG,IAAI,CAAZ,EAAe,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,IAAU,CAAV,GAAcE,CAAzB;AACf,UAAIA,CAAC,GAAG,IAAI,CAAZ,EAAe,OAAOD,CAAP;AACf,UAAIC,CAAC,GAAG,IAAI,CAAZ,EAAe,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAL,KAAW,IAAI,CAAJ,GAAQE,CAAnB,IAAwB,CAAnC;AACf,aAAOF,CAAP;AACD;;AACD,QAAInF,CAAC,KAAK,CAAV,EAAa;AACXvC,MAAAA,CAAC,GAAGE,CAAC,GAAGE,CAAC,GAAGyC,CAAZ,CADW,CACI;AAChB,KAFD,MAEO;AACL,UAAI8E,CAAC,GAAG9E,CAAC,GAAG,GAAJ,GAAUA,CAAC,IAAI,IAAIN,CAAR,CAAX,GAAwBM,CAAC,GAAGN,CAAJ,GAAQM,CAAC,GAAGN,CAA5C;AACA,UAAImF,CAAC,GAAG,IAAI7E,CAAJ,GAAQ8E,CAAhB;AACA3H,MAAAA,CAAC,GAAGyH,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOrF,CAAC,GAAG,IAAI,CAAf,CAAX;AACApC,MAAAA,CAAC,GAAGuH,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOrF,CAAP,CAAX;AACAlC,MAAAA,CAAC,GAAGqH,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOrF,CAAC,GAAG,IAAI,CAAf,CAAX;AACD;;AACD,WAAO;AACLtC,MAAAA,CAAC,EAAEA,CAAC,GAAG,GADF;AAELE,MAAAA,CAAC,EAAEA,CAAC,GAAG,GAFF;AAGLE,MAAAA,CAAC,EAAEA,CAAC,GAAG;AAHF,KAAP;AAKD,GAxbmB,CA0bpB;AACA;AACA;AACA;;;AACA,WAASiC,QAAT,CAAkBrC,CAAlB,EAAqBE,CAArB,EAAwBE,CAAxB,EAA2B;AACzBJ,IAAAA,CAAC,GAAGyD,OAAO,CAACzD,CAAD,EAAI,GAAJ,CAAX;AACAE,IAAAA,CAAC,GAAGuD,OAAO,CAACvD,CAAD,EAAI,GAAJ,CAAX;AACAE,IAAAA,CAAC,GAAGqD,OAAO,CAACrD,CAAD,EAAI,GAAJ,CAAX;AACA,QAAImH,GAAG,GAAG/G,IAAI,CAAC+G,GAAL,CAASvH,CAAT,EAAYE,CAAZ,EAAeE,CAAf,CAAV;AAAA,QACEkH,GAAG,GAAG9G,IAAI,CAAC8G,GAAL,CAAStH,CAAT,EAAYE,CAAZ,EAAeE,CAAf,CADR;AAEA,QAAIkC,CAAJ;AAAA,QACEC,CADF;AAAA,QAEEC,CAAC,GAAG+E,GAFN;AAGA,QAAIC,CAAC,GAAGD,GAAG,GAAGD,GAAd;AACA/E,IAAAA,CAAC,GAAGgF,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgBC,CAAC,GAAGD,GAAxB;;AACA,QAAIA,GAAG,IAAID,GAAX,EAAgB;AACdhF,MAAAA,CAAC,GAAG,CAAJ,CADc,CACP;AACR,KAFD,MAEO;AACL,cAAQiF,GAAR;AACE,aAAKvH,CAAL;AACEsC,UAAAA,CAAC,GAAG,CAACpC,CAAC,GAAGE,CAAL,IAAUoH,CAAV,IAAetH,CAAC,GAAGE,CAAJ,GAAQ,CAAR,GAAY,CAA3B,CAAJ;AACA;;AACF,aAAKF,CAAL;AACEoC,UAAAA,CAAC,GAAG,CAAClC,CAAC,GAAGJ,CAAL,IAAUwH,CAAV,GAAc,CAAlB;AACA;;AACF,aAAKpH,CAAL;AACEkC,UAAAA,CAAC,GAAG,CAACtC,CAAC,GAAGE,CAAL,IAAUsH,CAAV,GAAc,CAAlB;AACA;AATJ;;AAWAlF,MAAAA,CAAC,IAAI,CAAL;AACD;;AACD,WAAO;AACLA,MAAAA,CAAC,EAAEA,CADE;AAELC,MAAAA,CAAC,EAAEA,CAFE;AAGLC,MAAAA,CAAC,EAAEA;AAHE,KAAP;AAKD,GA9dmB,CAgepB;AACA;AACA;AACA;;;AACA,WAAS4E,QAAT,CAAkB9E,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACzBF,IAAAA,CAAC,GAAGmB,OAAO,CAACnB,CAAD,EAAI,GAAJ,CAAP,GAAkB,CAAtB;AACAC,IAAAA,CAAC,GAAGkB,OAAO,CAAClB,CAAD,EAAI,GAAJ,CAAX;AACAC,IAAAA,CAAC,GAAGiB,OAAO,CAACjB,CAAD,EAAI,GAAJ,CAAX;AACA,QAAIoE,CAAC,GAAGpG,IAAI,CAACqH,KAAL,CAAWvF,CAAX,CAAR;AAAA,QACEwF,CAAC,GAAGxF,CAAC,GAAGsE,CADV;AAAA,QAEEc,CAAC,GAAGlF,CAAC,IAAI,IAAID,CAAR,CAFP;AAAA,QAGEoF,CAAC,GAAGnF,CAAC,IAAI,IAAIsF,CAAC,GAAGvF,CAAZ,CAHP;AAAA,QAIEqF,CAAC,GAAGpF,CAAC,IAAI,IAAI,CAAC,IAAIsF,CAAL,IAAUvF,CAAlB,CAJP;AAAA,QAKEwF,GAAG,GAAGnB,CAAC,GAAG,CALZ;AAAA,QAME5G,CAAC,GAAG,CAACwC,CAAD,EAAImF,CAAJ,EAAOD,CAAP,EAAUA,CAAV,EAAaE,CAAb,EAAgBpF,CAAhB,EAAmBuF,GAAnB,CANN;AAAA,QAOE7H,CAAC,GAAG,CAAC0H,CAAD,EAAIpF,CAAJ,EAAOA,CAAP,EAAUmF,CAAV,EAAaD,CAAb,EAAgBA,CAAhB,EAAmBK,GAAnB,CAPN;AAAA,QAQE3H,CAAC,GAAG,CAACsH,CAAD,EAAIA,CAAJ,EAAOE,CAAP,EAAUpF,CAAV,EAAaA,CAAb,EAAgBmF,CAAhB,EAAmBI,GAAnB,CARN;AASA,WAAO;AACL/H,MAAAA,CAAC,EAAEA,CAAC,GAAG,GADF;AAELE,MAAAA,CAAC,EAAEA,CAAC,GAAG,GAFF;AAGLE,MAAAA,CAAC,EAAEA,CAAC,GAAG;AAHF,KAAP;AAKD,GAtfmB,CAwfpB;AACA;AACA;AACA;;;AACA,WAAS6C,QAAT,CAAkBjD,CAAlB,EAAqBE,CAArB,EAAwBE,CAAxB,EAA2B4C,UAA3B,EAAuC;AACrC,QAAIgF,GAAG,GAAG,CAACC,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWT,CAAX,EAAckE,QAAd,CAAuB,EAAvB,CAAD,CAAL,EAAmC+D,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWP,CAAX,EAAcgE,QAAd,CAAuB,EAAvB,CAAD,CAAvC,EAAqE+D,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWL,CAAX,EAAc8D,QAAd,CAAuB,EAAvB,CAAD,CAAzE,CAAV,CADqC,CAGrC;;AACA,QAAIlB,UAAU,IAAIgF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,KAAoBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAAlC,IAAsDF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,KAAoBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAA1E,IAA8FF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,KAAoBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAAtH,EAAwI;AACtI,aAAOF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,IAAmBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAAnB,GAAsCF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAA7C;AACD;;AACD,WAAOF,GAAG,CAACG,IAAJ,CAAS,EAAT,CAAP;AACD,GApgBmB,CAsgBpB;AACA;AACA;AACA;;;AACA,WAAS9E,SAAT,CAAmBrD,CAAnB,EAAsBE,CAAtB,EAAyBE,CAAzB,EAA4BE,CAA5B,EAA+B8C,UAA/B,EAA2C;AACzC,QAAI4E,GAAG,GAAG,CAACC,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWT,CAAX,EAAckE,QAAd,CAAuB,EAAvB,CAAD,CAAL,EAAmC+D,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWP,CAAX,EAAcgE,QAAd,CAAuB,EAAvB,CAAD,CAAvC,EAAqE+D,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWL,CAAX,EAAc8D,QAAd,CAAuB,EAAvB,CAAD,CAAzE,EAAuG+D,IAAI,CAACG,mBAAmB,CAAC9H,CAAD,CAApB,CAA3G,CAAV,CADyC,CAGzC;;AACA,QAAI8C,UAAU,IAAI4E,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,KAAoBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAAlC,IAAsDF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,KAAoBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAA1E,IAA8FF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,KAAoBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAAlH,IAAsIF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,KAAoBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAA9J,EAAgL;AAC9K,aAAOF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,IAAmBF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAAnB,GAAsCF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAAtC,GAAyDF,GAAG,CAAC,CAAD,CAAH,CAAOE,MAAP,CAAc,CAAd,CAAhE;AACD;;AACD,WAAOF,GAAG,CAACG,IAAJ,CAAS,EAAT,CAAP;AACD,GAlhBmB,CAohBpB;AACA;AACA;;;AACA,WAASnE,aAAT,CAAuBhE,CAAvB,EAA0BE,CAA1B,EAA6BE,CAA7B,EAAgCE,CAAhC,EAAmC;AACjC,QAAI0H,GAAG,GAAG,CAACC,IAAI,CAACG,mBAAmB,CAAC9H,CAAD,CAApB,CAAL,EAA+B2H,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWT,CAAX,EAAckE,QAAd,CAAuB,EAAvB,CAAD,CAAnC,EAAiE+D,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWP,CAAX,EAAcgE,QAAd,CAAuB,EAAvB,CAAD,CAArE,EAAmG+D,IAAI,CAACzH,IAAI,CAACC,KAAL,CAAWL,CAAX,EAAc8D,QAAd,CAAuB,EAAvB,CAAD,CAAvG,CAAV;AACA,WAAO8D,GAAG,CAACG,IAAJ,CAAS,EAAT,CAAP;AACD,GA1hBmB,CA4hBpB;AACA;;;AACAlJ,EAAAA,SAAS,CAACoJ,MAAV,GAAmB,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AAC3C,QAAI,CAACD,MAAD,IAAW,CAACC,MAAhB,EAAwB,OAAO,KAAP;AACxB,WAAOtJ,SAAS,CAACqJ,MAAD,CAAT,CAAkB/E,WAAlB,MAAmCtE,SAAS,CAACsJ,MAAD,CAAT,CAAkBhF,WAAlB,EAA1C;AACD,GAHD;;AAIAtE,EAAAA,SAAS,CAACuJ,MAAV,GAAmB,YAAY;AAC7B,WAAOvJ,SAAS,CAACyH,SAAV,CAAoB;AACzB1G,MAAAA,CAAC,EAAEQ,IAAI,CAACgI,MAAL,EADsB;AAEzBtI,MAAAA,CAAC,EAAEM,IAAI,CAACgI,MAAL,EAFsB;AAGzBpI,MAAAA,CAAC,EAAEI,IAAI,CAACgI,MAAL;AAHsB,KAApB,CAAP;AAKD,GAND,CAliBoB,CA0iBpB;AACA;AACA;AACA;;;AAEA,WAASjD,WAAT,CAAqB7F,KAArB,EAA4B+I,MAA5B,EAAoC;AAClCA,IAAAA,MAAM,GAAGA,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAAM,IAAI,EAAtC;AACA,QAAI9F,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACAC,IAAAA,GAAG,CAACJ,CAAJ,IAASkG,MAAM,GAAG,GAAlB;AACA9F,IAAAA,GAAG,CAACJ,CAAJ,GAAQmG,OAAO,CAAC/F,GAAG,CAACJ,CAAL,CAAf;AACA,WAAOtD,SAAS,CAAC0D,GAAD,CAAhB;AACD;;AACD,WAAS8C,SAAT,CAAmB/F,KAAnB,EAA0B+I,MAA1B,EAAkC;AAChCA,IAAAA,MAAM,GAAGA,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAAM,IAAI,EAAtC;AACA,QAAI9F,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACAC,IAAAA,GAAG,CAACJ,CAAJ,IAASkG,MAAM,GAAG,GAAlB;AACA9F,IAAAA,GAAG,CAACJ,CAAJ,GAAQmG,OAAO,CAAC/F,GAAG,CAACJ,CAAL,CAAf;AACA,WAAOtD,SAAS,CAAC0D,GAAD,CAAhB;AACD;;AACD,WAASgD,UAAT,CAAoBjG,KAApB,EAA2B;AACzB,WAAOT,SAAS,CAACS,KAAD,CAAT,CAAiB4F,UAAjB,CAA4B,GAA5B,CAAP;AACD;;AACD,WAASN,QAAT,CAAkBtF,KAAlB,EAAyB+I,MAAzB,EAAiC;AAC/BA,IAAAA,MAAM,GAAGA,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAAM,IAAI,EAAtC;AACA,QAAI9F,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACAC,IAAAA,GAAG,CAACE,CAAJ,IAAS4F,MAAM,GAAG,GAAlB;AACA9F,IAAAA,GAAG,CAACE,CAAJ,GAAQ6F,OAAO,CAAC/F,GAAG,CAACE,CAAL,CAAf;AACA,WAAO5D,SAAS,CAAC0D,GAAD,CAAhB;AACD;;AACD,WAASwC,SAAT,CAAmBzF,KAAnB,EAA0B+I,MAA1B,EAAkC;AAChCA,IAAAA,MAAM,GAAGA,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAAM,IAAI,EAAtC;AACA,QAAI7I,GAAG,GAAGX,SAAS,CAACS,KAAD,CAAT,CAAiB6B,KAAjB,EAAV;AACA3B,IAAAA,GAAG,CAACI,CAAJ,GAAQQ,IAAI,CAAC+G,GAAL,CAAS,CAAT,EAAY/G,IAAI,CAAC8G,GAAL,CAAS,GAAT,EAAc1H,GAAG,CAACI,CAAJ,GAAQQ,IAAI,CAACC,KAAL,CAAW,MAAM,EAAEgI,MAAM,GAAG,GAAX,CAAjB,CAAtB,CAAZ,CAAR;AACA7I,IAAAA,GAAG,CAACM,CAAJ,GAAQM,IAAI,CAAC+G,GAAL,CAAS,CAAT,EAAY/G,IAAI,CAAC8G,GAAL,CAAS,GAAT,EAAc1H,GAAG,CAACM,CAAJ,GAAQM,IAAI,CAACC,KAAL,CAAW,MAAM,EAAEgI,MAAM,GAAG,GAAX,CAAjB,CAAtB,CAAZ,CAAR;AACA7I,IAAAA,GAAG,CAACQ,CAAJ,GAAQI,IAAI,CAAC+G,GAAL,CAAS,CAAT,EAAY/G,IAAI,CAAC8G,GAAL,CAAS,GAAT,EAAc1H,GAAG,CAACQ,CAAJ,GAAQI,IAAI,CAACC,KAAL,CAAW,MAAM,EAAEgI,MAAM,GAAG,GAAX,CAAjB,CAAtB,CAAZ,CAAR;AACA,WAAOxJ,SAAS,CAACW,GAAD,CAAhB;AACD;;AACD,WAASyF,OAAT,CAAiB3F,KAAjB,EAAwB+I,MAAxB,EAAgC;AAC9BA,IAAAA,MAAM,GAAGA,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAAM,IAAI,EAAtC;AACA,QAAI9F,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACAC,IAAAA,GAAG,CAACE,CAAJ,IAAS4F,MAAM,GAAG,GAAlB;AACA9F,IAAAA,GAAG,CAACE,CAAJ,GAAQ6F,OAAO,CAAC/F,GAAG,CAACE,CAAL,CAAf;AACA,WAAO5D,SAAS,CAAC0D,GAAD,CAAhB;AACD,GArlBmB,CAulBpB;AACA;;;AACA,WAASkD,KAAT,CAAenG,KAAf,EAAsB+I,MAAtB,EAA8B;AAC5B,QAAI9F,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACA,QAAIiG,GAAG,GAAG,CAAChG,GAAG,CAACL,CAAJ,GAAQmG,MAAT,IAAmB,GAA7B;AACA9F,IAAAA,GAAG,CAACL,CAAJ,GAAQqG,GAAG,GAAG,CAAN,GAAU,MAAMA,GAAhB,GAAsBA,GAA9B;AACA,WAAO1J,SAAS,CAAC0D,GAAD,CAAhB;AACD,GA9lBmB,CAgmBpB;AACA;AACA;AACA;;;AAEA,WAASuD,WAAT,CAAqBxG,KAArB,EAA4B;AAC1B,QAAIiD,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACAC,IAAAA,GAAG,CAACL,CAAJ,GAAQ,CAACK,GAAG,CAACL,CAAJ,GAAQ,GAAT,IAAgB,GAAxB;AACA,WAAOrD,SAAS,CAAC0D,GAAD,CAAhB;AACD;;AACD,WAAS6D,MAAT,CAAgB9G,KAAhB,EAAuBkJ,MAAvB,EAA+B;AAC7B,QAAIC,KAAK,CAACD,MAAD,CAAL,IAAiBA,MAAM,IAAI,CAA/B,EAAkC;AAChC,YAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,QAAInG,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACA,QAAIqG,MAAM,GAAG,CAAC9J,SAAS,CAACS,KAAD,CAAV,CAAb;AACA,QAAIsJ,IAAI,GAAG,MAAMJ,MAAjB;;AACA,SAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,MAApB,EAA4BhC,CAAC,EAA7B,EAAiC;AAC/BmC,MAAAA,MAAM,CAACE,IAAP,CAAYhK,SAAS,CAAC;AACpBqD,QAAAA,CAAC,EAAE,CAACK,GAAG,CAACL,CAAJ,GAAQsE,CAAC,GAAGoC,IAAb,IAAqB,GADJ;AAEpBzG,QAAAA,CAAC,EAAEI,GAAG,CAACJ,CAFa;AAGpBM,QAAAA,CAAC,EAAEF,GAAG,CAACE;AAHa,OAAD,CAArB;AAKD;;AACD,WAAOkG,MAAP;AACD;;AACD,WAASzC,gBAAT,CAA0B5G,KAA1B,EAAiC;AAC/B,QAAIiD,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACA,QAAIJ,CAAC,GAAGK,GAAG,CAACL,CAAZ;AACA,WAAO,CAACrD,SAAS,CAACS,KAAD,CAAV,EAAmBT,SAAS,CAAC;AAClCqD,MAAAA,CAAC,EAAE,CAACA,CAAC,GAAG,EAAL,IAAW,GADoB;AAElCC,MAAAA,CAAC,EAAEI,GAAG,CAACJ,CAF2B;AAGlCM,MAAAA,CAAC,EAAEF,GAAG,CAACE;AAH2B,KAAD,CAA5B,EAIH5D,SAAS,CAAC;AACZqD,MAAAA,CAAC,EAAE,CAACA,CAAC,GAAG,GAAL,IAAY,GADH;AAEZC,MAAAA,CAAC,EAAEI,GAAG,CAACJ,CAFK;AAGZM,MAAAA,CAAC,EAAEF,GAAG,CAACE;AAHK,KAAD,CAJN,CAAP;AASD;;AACD,WAASmD,UAAT,CAAoBtG,KAApB,EAA2BwJ,OAA3B,EAAoCC,MAApC,EAA4C;AAC1CD,IAAAA,OAAO,GAAGA,OAAO,IAAI,CAArB;AACAC,IAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACA,QAAIxG,GAAG,GAAG1D,SAAS,CAACS,KAAD,CAAT,CAAiBgD,KAAjB,EAAV;AACA,QAAI0G,IAAI,GAAG,MAAMD,MAAjB;AACA,QAAIE,GAAG,GAAG,CAACpK,SAAS,CAACS,KAAD,CAAV,CAAV;;AACA,SAAKiD,GAAG,CAACL,CAAJ,GAAQ,CAACK,GAAG,CAACL,CAAJ,IAAS8G,IAAI,GAAGF,OAAP,IAAkB,CAA3B,IAAgC,GAAjC,IAAwC,GAArD,EAA0D,EAAEA,OAA5D,GAAsE;AACpEvG,MAAAA,GAAG,CAACL,CAAJ,GAAQ,CAACK,GAAG,CAACL,CAAJ,GAAQ8G,IAAT,IAAiB,GAAzB;AACAC,MAAAA,GAAG,CAACJ,IAAJ,CAAShK,SAAS,CAAC0D,GAAD,CAAlB;AACD;;AACD,WAAO0G,GAAP;AACD;;AACD,WAASjD,cAAT,CAAwB1G,KAAxB,EAA+BwJ,OAA/B,EAAwC;AACtCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,CAArB;AACA,QAAI9G,GAAG,GAAGnD,SAAS,CAACS,KAAD,CAAT,CAAiByC,KAAjB,EAAV;AACA,QAAIG,CAAC,GAAGF,GAAG,CAACE,CAAZ;AAAA,QACEC,CAAC,GAAGH,GAAG,CAACG,CADV;AAAA,QAEEC,CAAC,GAAGJ,GAAG,CAACI,CAFV;AAGA,QAAI6G,GAAG,GAAG,EAAV;AACA,QAAIC,YAAY,GAAG,IAAIJ,OAAvB;;AACA,WAAOA,OAAO,EAAd,EAAkB;AAChBG,MAAAA,GAAG,CAACJ,IAAJ,CAAShK,SAAS,CAAC;AACjBqD,QAAAA,CAAC,EAAEA,CADc;AAEjBC,QAAAA,CAAC,EAAEA,CAFc;AAGjBC,QAAAA,CAAC,EAAEA;AAHc,OAAD,CAAlB;AAKAA,MAAAA,CAAC,GAAG,CAACA,CAAC,GAAG8G,YAAL,IAAqB,CAAzB;AACD;;AACD,WAAOD,GAAP;AACD,GApqBmB,CAsqBpB;AACA;;;AAEApK,EAAAA,SAAS,CAACsK,GAAV,GAAgB,UAAUjB,MAAV,EAAkBC,MAAlB,EAA0BE,MAA1B,EAAkC;AAChDA,IAAAA,MAAM,GAAGA,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAAM,IAAI,EAAtC;AACA,QAAIe,IAAI,GAAGvK,SAAS,CAACqJ,MAAD,CAAT,CAAkB/G,KAAlB,EAAX;AACA,QAAIkI,IAAI,GAAGxK,SAAS,CAACsJ,MAAD,CAAT,CAAkBhH,KAAlB,EAAX;AACA,QAAImG,CAAC,GAAGe,MAAM,GAAG,GAAjB;AACA,QAAIiB,IAAI,GAAG;AACT1J,MAAAA,CAAC,EAAE,CAACyJ,IAAI,CAACzJ,CAAL,GAASwJ,IAAI,CAACxJ,CAAf,IAAoB0H,CAApB,GAAwB8B,IAAI,CAACxJ,CADvB;AAETE,MAAAA,CAAC,EAAE,CAACuJ,IAAI,CAACvJ,CAAL,GAASsJ,IAAI,CAACtJ,CAAf,IAAoBwH,CAApB,GAAwB8B,IAAI,CAACtJ,CAFvB;AAGTE,MAAAA,CAAC,EAAE,CAACqJ,IAAI,CAACrJ,CAAL,GAASoJ,IAAI,CAACpJ,CAAf,IAAoBsH,CAApB,GAAwB8B,IAAI,CAACpJ,CAHvB;AAITE,MAAAA,CAAC,EAAE,CAACmJ,IAAI,CAACnJ,CAAL,GAASkJ,IAAI,CAAClJ,CAAf,IAAoBoH,CAApB,GAAwB8B,IAAI,CAAClJ;AAJvB,KAAX;AAMA,WAAOrB,SAAS,CAACyK,IAAD,CAAhB;AACD,GAZD,CAzqBoB,CAurBpB;AACA;AACA;AAEA;AACA;;;AACAzK,EAAAA,SAAS,CAAC0K,WAAV,GAAwB,UAAUrB,MAAV,EAAkBC,MAAlB,EAA0B;AAChD,QAAIqB,EAAE,GAAG3K,SAAS,CAACqJ,MAAD,CAAlB;AACA,QAAIuB,EAAE,GAAG5K,SAAS,CAACsJ,MAAD,CAAlB;AACA,WAAO,CAAC/H,IAAI,CAAC+G,GAAL,CAASqC,EAAE,CAACpI,YAAH,EAAT,EAA4BqI,EAAE,CAACrI,YAAH,EAA5B,IAAiD,IAAlD,KAA2DhB,IAAI,CAAC8G,GAAL,CAASsC,EAAE,CAACpI,YAAH,EAAT,EAA4BqI,EAAE,CAACrI,YAAH,EAA5B,IAAiD,IAA5G,CAAP;AACD,GAJD,CA7rBoB,CAmsBpB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACAvC,EAAAA,SAAS,CAAC6K,UAAV,GAAuB,UAAUxB,MAAV,EAAkBC,MAAlB,EAA0BwB,KAA1B,EAAiC;AACtD,QAAIJ,WAAW,GAAG1K,SAAS,CAAC0K,WAAV,CAAsBrB,MAAtB,EAA8BC,MAA9B,CAAlB;AACA,QAAIyB,UAAJ,EAAgBC,GAAhB;AACAA,IAAAA,GAAG,GAAG,KAAN;AACAD,IAAAA,UAAU,GAAGE,kBAAkB,CAACH,KAAD,CAA/B;;AACA,YAAQC,UAAU,CAACG,KAAX,GAAmBH,UAAU,CAACI,IAAtC;AACE,WAAK,SAAL;AACA,WAAK,UAAL;AACEH,QAAAA,GAAG,GAAGN,WAAW,IAAI,GAArB;AACA;;AACF,WAAK,SAAL;AACEM,QAAAA,GAAG,GAAGN,WAAW,IAAI,CAArB;AACA;;AACF,WAAK,UAAL;AACEM,QAAAA,GAAG,GAAGN,WAAW,IAAI,CAArB;AACA;AAVJ;;AAYA,WAAOM,GAAP;AACD,GAlBD,CA7sBoB,CAiuBpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhL,EAAAA,SAAS,CAACoL,YAAV,GAAyB,UAAUC,SAAV,EAAqBC,SAArB,EAAgC7F,IAAhC,EAAsC;AAC7D,QAAI8F,SAAS,GAAG,IAAhB;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAId,WAAJ;AACA,QAAIe,qBAAJ,EAA2BP,KAA3B,EAAkCC,IAAlC;AACA1F,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAgG,IAAAA,qBAAqB,GAAGhG,IAAI,CAACgG,qBAA7B;AACAP,IAAAA,KAAK,GAAGzF,IAAI,CAACyF,KAAb;AACAC,IAAAA,IAAI,GAAG1F,IAAI,CAAC0F,IAAZ;;AACA,SAAK,IAAIxD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2D,SAAS,CAACI,MAA9B,EAAsC/D,CAAC,EAAvC,EAA2C;AACzC+C,MAAAA,WAAW,GAAG1K,SAAS,CAAC0K,WAAV,CAAsBW,SAAtB,EAAiCC,SAAS,CAAC3D,CAAD,CAA1C,CAAd;;AACA,UAAI+C,WAAW,GAAGc,SAAlB,EAA6B;AAC3BA,QAAAA,SAAS,GAAGd,WAAZ;AACAa,QAAAA,SAAS,GAAGvL,SAAS,CAACsL,SAAS,CAAC3D,CAAD,CAAV,CAArB;AACD;AACF;;AACD,QAAI3H,SAAS,CAAC6K,UAAV,CAAqBQ,SAArB,EAAgCE,SAAhC,EAA2C;AAC7CL,MAAAA,KAAK,EAAEA,KADsC;AAE7CC,MAAAA,IAAI,EAAEA;AAFuC,KAA3C,KAGE,CAACM,qBAHP,EAG8B;AAC5B,aAAOF,SAAP;AACD,KALD,MAKO;AACL9F,MAAAA,IAAI,CAACgG,qBAAL,GAA6B,KAA7B;AACA,aAAOzL,SAAS,CAACoL,YAAV,CAAuBC,SAAvB,EAAkC,CAAC,MAAD,EAAS,MAAT,CAAlC,EAAoD5F,IAApD,CAAP;AACD;AACF,GAzBD,CA1uBoB,CAqwBpB;AACA;AACA;;;AACA,MAAIkG,KAAK,GAAG3L,SAAS,CAAC2L,KAAV,GAAkB;AAC5BC,IAAAA,SAAS,EAAE,QADiB;AAE5BC,IAAAA,YAAY,EAAE,QAFc;AAG5BC,IAAAA,IAAI,EAAE,KAHsB;AAI5BC,IAAAA,UAAU,EAAE,QAJgB;AAK5BC,IAAAA,KAAK,EAAE,QALqB;AAM5BC,IAAAA,KAAK,EAAE,QANqB;AAO5BC,IAAAA,MAAM,EAAE,QAPoB;AAQ5BC,IAAAA,KAAK,EAAE,KARqB;AAS5BC,IAAAA,cAAc,EAAE,QATY;AAU5BC,IAAAA,IAAI,EAAE,KAVsB;AAW5BC,IAAAA,UAAU,EAAE,QAXgB;AAY5BC,IAAAA,KAAK,EAAE,QAZqB;AAa5BC,IAAAA,SAAS,EAAE,QAbiB;AAc5BC,IAAAA,WAAW,EAAE,QAde;AAe5BC,IAAAA,SAAS,EAAE,QAfiB;AAgB5BC,IAAAA,UAAU,EAAE,QAhBgB;AAiB5BC,IAAAA,SAAS,EAAE,QAjBiB;AAkB5BC,IAAAA,KAAK,EAAE,QAlBqB;AAmB5BC,IAAAA,cAAc,EAAE,QAnBY;AAoB5BC,IAAAA,QAAQ,EAAE,QApBkB;AAqB5BC,IAAAA,OAAO,EAAE,QArBmB;AAsB5BC,IAAAA,IAAI,EAAE,KAtBsB;AAuB5BC,IAAAA,QAAQ,EAAE,QAvBkB;AAwB5BC,IAAAA,QAAQ,EAAE,QAxBkB;AAyB5BC,IAAAA,aAAa,EAAE,QAzBa;AA0B5BC,IAAAA,QAAQ,EAAE,QA1BkB;AA2B5BC,IAAAA,SAAS,EAAE,QA3BiB;AA4B5BC,IAAAA,QAAQ,EAAE,QA5BkB;AA6B5BC,IAAAA,SAAS,EAAE,QA7BiB;AA8B5BC,IAAAA,WAAW,EAAE,QA9Be;AA+B5BC,IAAAA,cAAc,EAAE,QA/BY;AAgC5BC,IAAAA,UAAU,EAAE,QAhCgB;AAiC5BC,IAAAA,UAAU,EAAE,QAjCgB;AAkC5BC,IAAAA,OAAO,EAAE,QAlCmB;AAmC5BC,IAAAA,UAAU,EAAE,QAnCgB;AAoC5BC,IAAAA,YAAY,EAAE,QApCc;AAqC5BC,IAAAA,aAAa,EAAE,QArCa;AAsC5BC,IAAAA,aAAa,EAAE,QAtCa;AAuC5BC,IAAAA,aAAa,EAAE,QAvCa;AAwC5BC,IAAAA,aAAa,EAAE,QAxCa;AAyC5BC,IAAAA,UAAU,EAAE,QAzCgB;AA0C5BC,IAAAA,QAAQ,EAAE,QA1CkB;AA2C5BC,IAAAA,WAAW,EAAE,QA3Ce;AA4C5BC,IAAAA,OAAO,EAAE,QA5CmB;AA6C5BC,IAAAA,OAAO,EAAE,QA7CmB;AA8C5BC,IAAAA,UAAU,EAAE,QA9CgB;AA+C5BC,IAAAA,SAAS,EAAE,QA/CiB;AAgD5BC,IAAAA,WAAW,EAAE,QAhDe;AAiD5BC,IAAAA,WAAW,EAAE,QAjDe;AAkD5BC,IAAAA,OAAO,EAAE,KAlDmB;AAmD5BC,IAAAA,SAAS,EAAE,QAnDiB;AAoD5BC,IAAAA,UAAU,EAAE,QApDgB;AAqD5BC,IAAAA,IAAI,EAAE,QArDsB;AAsD5BC,IAAAA,SAAS,EAAE,QAtDiB;AAuD5BC,IAAAA,IAAI,EAAE,QAvDsB;AAwD5BC,IAAAA,KAAK,EAAE,QAxDqB;AAyD5BC,IAAAA,WAAW,EAAE,QAzDe;AA0D5BC,IAAAA,IAAI,EAAE,QA1DsB;AA2D5BC,IAAAA,QAAQ,EAAE,QA3DkB;AA4D5BC,IAAAA,OAAO,EAAE,QA5DmB;AA6D5BC,IAAAA,SAAS,EAAE,QA7DiB;AA8D5BC,IAAAA,MAAM,EAAE,QA9DoB;AA+D5BC,IAAAA,KAAK,EAAE,QA/DqB;AAgE5BC,IAAAA,KAAK,EAAE,QAhEqB;AAiE5BC,IAAAA,QAAQ,EAAE,QAjEkB;AAkE5BC,IAAAA,aAAa,EAAE,QAlEa;AAmE5BC,IAAAA,SAAS,EAAE,QAnEiB;AAoE5BC,IAAAA,YAAY,EAAE,QApEc;AAqE5BC,IAAAA,SAAS,EAAE,QArEiB;AAsE5BC,IAAAA,UAAU,EAAE,QAtEgB;AAuE5BC,IAAAA,SAAS,EAAE,QAvEiB;AAwE5BC,IAAAA,oBAAoB,EAAE,QAxEM;AAyE5BC,IAAAA,SAAS,EAAE,QAzEiB;AA0E5BC,IAAAA,UAAU,EAAE,QA1EgB;AA2E5BC,IAAAA,SAAS,EAAE,QA3EiB;AA4E5BC,IAAAA,SAAS,EAAE,QA5EiB;AA6E5BC,IAAAA,WAAW,EAAE,QA7Ee;AA8E5BC,IAAAA,aAAa,EAAE,QA9Ea;AA+E5BC,IAAAA,YAAY,EAAE,QA/Ec;AAgF5BC,IAAAA,cAAc,EAAE,KAhFY;AAiF5BC,IAAAA,cAAc,EAAE,KAjFY;AAkF5BC,IAAAA,cAAc,EAAE,QAlFY;AAmF5BC,IAAAA,WAAW,EAAE,QAnFe;AAoF5BC,IAAAA,IAAI,EAAE,KApFsB;AAqF5BC,IAAAA,SAAS,EAAE,QArFiB;AAsF5BC,IAAAA,KAAK,EAAE,QAtFqB;AAuF5BC,IAAAA,OAAO,EAAE,KAvFmB;AAwF5BC,IAAAA,MAAM,EAAE,QAxFoB;AAyF5BC,IAAAA,gBAAgB,EAAE,QAzFU;AA0F5BC,IAAAA,UAAU,EAAE,QA1FgB;AA2F5BC,IAAAA,YAAY,EAAE,QA3Fc;AA4F5BC,IAAAA,YAAY,EAAE,QA5Fc;AA6F5BC,IAAAA,cAAc,EAAE,QA7FY;AA8F5BC,IAAAA,eAAe,EAAE,QA9FW;AA+F5BC,IAAAA,iBAAiB,EAAE,QA/FS;AAgG5BC,IAAAA,eAAe,EAAE,QAhGW;AAiG5BC,IAAAA,eAAe,EAAE,QAjGW;AAkG5BC,IAAAA,YAAY,EAAE,QAlGc;AAmG5BC,IAAAA,SAAS,EAAE,QAnGiB;AAoG5BC,IAAAA,SAAS,EAAE,QApGiB;AAqG5BC,IAAAA,QAAQ,EAAE,QArGkB;AAsG5BC,IAAAA,WAAW,EAAE,QAtGe;AAuG5BC,IAAAA,IAAI,EAAE,QAvGsB;AAwG5BC,IAAAA,OAAO,EAAE,QAxGmB;AAyG5BC,IAAAA,KAAK,EAAE,QAzGqB;AA0G5BC,IAAAA,SAAS,EAAE,QA1GiB;AA2G5BC,IAAAA,MAAM,EAAE,QA3GoB;AA4G5BC,IAAAA,SAAS,EAAE,QA5GiB;AA6G5BC,IAAAA,MAAM,EAAE,QA7GoB;AA8G5BC,IAAAA,aAAa,EAAE,QA9Ga;AA+G5BC,IAAAA,SAAS,EAAE,QA/GiB;AAgH5BC,IAAAA,aAAa,EAAE,QAhHa;AAiH5BC,IAAAA,aAAa,EAAE,QAjHa;AAkH5BC,IAAAA,UAAU,EAAE,QAlHgB;AAmH5BC,IAAAA,SAAS,EAAE,QAnHiB;AAoH5BC,IAAAA,IAAI,EAAE,QApHsB;AAqH5BC,IAAAA,IAAI,EAAE,QArHsB;AAsH5BC,IAAAA,IAAI,EAAE,QAtHsB;AAuH5BC,IAAAA,UAAU,EAAE,QAvHgB;AAwH5BC,IAAAA,MAAM,EAAE,QAxHoB;AAyH5BC,IAAAA,aAAa,EAAE,QAzHa;AA0H5BC,IAAAA,GAAG,EAAE,KA1HuB;AA2H5BC,IAAAA,SAAS,EAAE,QA3HiB;AA4H5BC,IAAAA,SAAS,EAAE,QA5HiB;AA6H5BC,IAAAA,WAAW,EAAE,QA7He;AA8H5BC,IAAAA,MAAM,EAAE,QA9HoB;AA+H5BC,IAAAA,UAAU,EAAE,QA/HgB;AAgI5BC,IAAAA,QAAQ,EAAE,QAhIkB;AAiI5BC,IAAAA,QAAQ,EAAE,QAjIkB;AAkI5BC,IAAAA,MAAM,EAAE,QAlIoB;AAmI5BC,IAAAA,MAAM,EAAE,QAnIoB;AAoI5BC,IAAAA,OAAO,EAAE,QApImB;AAqI5BC,IAAAA,SAAS,EAAE,QArIiB;AAsI5BC,IAAAA,SAAS,EAAE,QAtIiB;AAuI5BC,IAAAA,SAAS,EAAE,QAvIiB;AAwI5BC,IAAAA,IAAI,EAAE,QAxIsB;AAyI5BC,IAAAA,WAAW,EAAE,QAzIe;AA0I5BC,IAAAA,SAAS,EAAE,QA1IiB;AA2I5BC,IAAAA,GAAG,EAAE,QA3IuB;AA4I5BC,IAAAA,IAAI,EAAE,QA5IsB;AA6I5BC,IAAAA,OAAO,EAAE,QA7ImB;AA8I5BC,IAAAA,MAAM,EAAE,QA9IoB;AA+I5BC,IAAAA,SAAS,EAAE,QA/IiB;AAgJ5BC,IAAAA,MAAM,EAAE,QAhJoB;AAiJ5BC,IAAAA,KAAK,EAAE,QAjJqB;AAkJ5BC,IAAAA,KAAK,EAAE,KAlJqB;AAmJ5BC,IAAAA,UAAU,EAAE,QAnJgB;AAoJ5BC,IAAAA,MAAM,EAAE,KApJoB;AAqJ5BC,IAAAA,WAAW,EAAE;AArJe,GAA9B,CAxwBoB,CAg6BpB;;AACA,MAAIrQ,QAAQ,GAAG3E,SAAS,CAAC2E,QAAV,GAAqBsQ,IAAI,CAACtJ,KAAD,CAAxC,CAj6BoB,CAm6BpB;AACA;AAEA;;AACA,WAASsJ,IAAT,CAAcC,CAAd,EAAiB;AACf,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIxN,CAAT,IAAcuN,CAAd,EAAiB;AACf,UAAIA,CAAC,CAACtN,cAAF,CAAiBD,CAAjB,CAAJ,EAAyB;AACvBwN,QAAAA,OAAO,CAACD,CAAC,CAACvN,CAAD,CAAF,CAAP,GAAgBA,CAAhB;AACD;AACF;;AACD,WAAOwN,OAAP;AACD,GA/6BmB,CAi7BpB;;;AACA,WAASlS,UAAT,CAAoB5B,CAApB,EAAuB;AACrBA,IAAAA,CAAC,GAAG+T,UAAU,CAAC/T,CAAD,CAAd;;AACA,QAAIuI,KAAK,CAACvI,CAAD,CAAL,IAAYA,CAAC,GAAG,CAAhB,IAAqBA,CAAC,GAAG,CAA7B,EAAgC;AAC9BA,MAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,WAAOA,CAAP;AACD,GAx7BmB,CA07BpB;;;AACA,WAASmD,OAAT,CAAiB6Q,CAAjB,EAAoB/M,GAApB,EAAyB;AACvB,QAAIgN,cAAc,CAACD,CAAD,CAAlB,EAAuBA,CAAC,GAAG,MAAJ;AACvB,QAAIE,cAAc,GAAGC,YAAY,CAACH,CAAD,CAAjC;AACAA,IAAAA,CAAC,GAAG9T,IAAI,CAAC8G,GAAL,CAASC,GAAT,EAAc/G,IAAI,CAAC+G,GAAL,CAAS,CAAT,EAAY8M,UAAU,CAACC,CAAD,CAAtB,CAAd,CAAJ,CAHuB,CAKvB;;AACA,QAAIE,cAAJ,EAAoB;AAClBF,MAAAA,CAAC,GAAGI,QAAQ,CAACJ,CAAC,GAAG/M,GAAL,EAAU,EAAV,CAAR,GAAwB,GAA5B;AACD,KARsB,CAUvB;;;AACA,QAAI/G,IAAI,CAACmU,GAAL,CAASL,CAAC,GAAG/M,GAAb,IAAoB,QAAxB,EAAkC;AAChC,aAAO,CAAP;AACD,KAbsB,CAevB;;;AACA,WAAO+M,CAAC,GAAG/M,GAAJ,GAAU8M,UAAU,CAAC9M,GAAD,CAA3B;AACD,GA58BmB,CA88BpB;;;AACA,WAASmB,OAAT,CAAiBkM,GAAjB,EAAsB;AACpB,WAAOpU,IAAI,CAAC8G,GAAL,CAAS,CAAT,EAAY9G,IAAI,CAAC+G,GAAL,CAAS,CAAT,EAAYqN,GAAZ,CAAZ,CAAP;AACD,GAj9BmB,CAm9BpB;;;AACA,WAASC,eAAT,CAAyBD,GAAzB,EAA8B;AAC5B,WAAOF,QAAQ,CAACE,GAAD,EAAM,EAAN,CAAf;AACD,GAt9BmB,CAw9BpB;AACA;;;AACA,WAASL,cAAT,CAAwBD,CAAxB,EAA2B;AACzB,WAAO,OAAOA,CAAP,IAAY,QAAZ,IAAwBA,CAAC,CAACQ,OAAF,CAAU,GAAV,KAAkB,CAAC,CAA3C,IAAgDT,UAAU,CAACC,CAAD,CAAV,KAAkB,CAAzE;AACD,GA59BmB,CA89BpB;;;AACA,WAASG,YAAT,CAAsBH,CAAtB,EAAyB;AACvB,WAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACQ,OAAF,CAAU,GAAV,KAAkB,CAAC,CAAnD;AACD,GAj+BmB,CAm+BpB;;;AACA,WAAS7M,IAAT,CAAc8M,CAAd,EAAiB;AACf,WAAOA,CAAC,CAACpK,MAAF,IAAY,CAAZ,GAAgB,MAAMoK,CAAtB,GAA0B,KAAKA,CAAtC;AACD,GAt+BmB,CAw+BpB;;;AACA,WAASjO,mBAAT,CAA6BwN,CAA7B,EAAgC;AAC9B,QAAIA,CAAC,IAAI,CAAT,EAAY;AACVA,MAAAA,CAAC,GAAGA,CAAC,GAAG,GAAJ,GAAU,GAAd;AACD;;AACD,WAAOA,CAAP;AACD,GA9+BmB,CAg/BpB;;;AACA,WAASlM,mBAAT,CAA6BZ,CAA7B,EAAgC;AAC9B,WAAOhH,IAAI,CAACC,KAAL,CAAW4T,UAAU,CAAC7M,CAAD,CAAV,GAAgB,GAA3B,EAAgCtD,QAAhC,CAAyC,EAAzC,CAAP;AACD,GAn/BmB,CAo/BpB;;;AACA,WAAS8Q,mBAAT,CAA6B1S,CAA7B,EAAgC;AAC9B,WAAOuS,eAAe,CAACvS,CAAD,CAAf,GAAqB,GAA5B;AACD;;AACD,MAAI2S,QAAQ,GAAG,YAAY;AACzB;AACA,QAAIC,WAAW,GAAG,eAAlB,CAFyB,CAIzB;;AACA,QAAIC,UAAU,GAAG,sBAAjB,CALyB,CAOzB;;AACA,QAAIC,QAAQ,GAAG,QAAQD,UAAR,GAAqB,OAArB,GAA+BD,WAA/B,GAA6C,GAA5D,CARyB,CAUzB;AACA;AACA;;AACA,QAAIG,iBAAiB,GAAG,gBAAgBD,QAAhB,GAA2B,YAA3B,GAA0CA,QAA1C,GAAqD,YAArD,GAAoEA,QAApE,GAA+E,WAAvG;AACA,QAAIE,iBAAiB,GAAG,gBAAgBF,QAAhB,GAA2B,YAA3B,GAA0CA,QAA1C,GAAqD,YAArD,GAAoEA,QAApE,GAA+E,YAA/E,GAA8FA,QAA9F,GAAyG,WAAjI;AACA,WAAO;AACLA,MAAAA,QAAQ,EAAE,IAAIG,MAAJ,CAAWH,QAAX,CADL;AAELxV,MAAAA,GAAG,EAAE,IAAI2V,MAAJ,CAAW,QAAQF,iBAAnB,CAFA;AAGL3L,MAAAA,IAAI,EAAE,IAAI6L,MAAJ,CAAW,SAASD,iBAApB,CAHD;AAIL3S,MAAAA,GAAG,EAAE,IAAI4S,MAAJ,CAAW,QAAQF,iBAAnB,CAJA;AAKLG,MAAAA,IAAI,EAAE,IAAID,MAAJ,CAAW,SAASD,iBAApB,CALD;AAMLlT,MAAAA,GAAG,EAAE,IAAImT,MAAJ,CAAW,QAAQF,iBAAnB,CANA;AAOLI,MAAAA,IAAI,EAAE,IAAIF,MAAJ,CAAW,SAASD,iBAApB,CAPD;AAQLI,MAAAA,IAAI,EAAE,sDARD;AASLC,MAAAA,IAAI,EAAE,sDATD;AAULC,MAAAA,IAAI,EAAE,sEAVD;AAWLC,MAAAA,IAAI,EAAE;AAXD,KAAP;AAaD,GA5Bc,EAAf,CAx/BoB,CAshCpB;AACA;AACA;;;AACA,WAAS7O,cAAT,CAAwBtH,KAAxB,EAA+B;AAC7B,WAAO,CAAC,CAACuV,QAAQ,CAACG,QAAT,CAAkBU,IAAlB,CAAuBpW,KAAvB,CAAT;AACD,GA3hCmB,CA6hCpB;AACA;AACA;;;AACA,WAASqH,mBAAT,CAA6BrH,KAA7B,EAAoC;AAClCA,IAAAA,KAAK,GAAGA,KAAK,CAACqW,OAAN,CAAcvW,QAAd,EAAwB,EAAxB,EAA4BuW,OAA5B,CAAoCtW,SAApC,EAA+C,EAA/C,EAAmDuW,WAAnD,EAAR;AACA,QAAIC,KAAK,GAAG,KAAZ;;AACA,QAAIrL,KAAK,CAAClL,KAAD,CAAT,EAAkB;AAChBA,MAAAA,KAAK,GAAGkL,KAAK,CAAClL,KAAD,CAAb;AACAuW,MAAAA,KAAK,GAAG,IAAR;AACD,KAHD,MAGO,IAAIvW,KAAK,IAAI,aAAb,EAA4B;AACjC,aAAO;AACLM,QAAAA,CAAC,EAAE,CADE;AAELE,QAAAA,CAAC,EAAE,CAFE;AAGLE,QAAAA,CAAC,EAAE,CAHE;AAILE,QAAAA,CAAC,EAAE,CAJE;AAKLK,QAAAA,MAAM,EAAE;AALH,OAAP;AAOD,KAdiC,CAgBlC;AACA;AACA;AACA;;;AACA,QAAIuV,KAAJ;;AACA,QAAIA,KAAK,GAAGjB,QAAQ,CAACrV,GAAT,CAAakW,IAAb,CAAkBpW,KAAlB,CAAZ,EAAsC;AACpC,aAAO;AACLM,QAAAA,CAAC,EAAEkW,KAAK,CAAC,CAAD,CADH;AAELhW,QAAAA,CAAC,EAAEgW,KAAK,CAAC,CAAD,CAFH;AAGL9V,QAAAA,CAAC,EAAE8V,KAAK,CAAC,CAAD;AAHH,OAAP;AAKD;;AACD,QAAIA,KAAK,GAAGjB,QAAQ,CAACvL,IAAT,CAAcoM,IAAd,CAAmBpW,KAAnB,CAAZ,EAAuC;AACrC,aAAO;AACLM,QAAAA,CAAC,EAAEkW,KAAK,CAAC,CAAD,CADH;AAELhW,QAAAA,CAAC,EAAEgW,KAAK,CAAC,CAAD,CAFH;AAGL9V,QAAAA,CAAC,EAAE8V,KAAK,CAAC,CAAD,CAHH;AAIL5V,QAAAA,CAAC,EAAE4V,KAAK,CAAC,CAAD;AAJH,OAAP;AAMD;;AACD,QAAIA,KAAK,GAAGjB,QAAQ,CAACtS,GAAT,CAAamT,IAAb,CAAkBpW,KAAlB,CAAZ,EAAsC;AACpC,aAAO;AACL4C,QAAAA,CAAC,EAAE4T,KAAK,CAAC,CAAD,CADH;AAEL3T,QAAAA,CAAC,EAAE2T,KAAK,CAAC,CAAD,CAFH;AAGLrT,QAAAA,CAAC,EAAEqT,KAAK,CAAC,CAAD;AAHH,OAAP;AAKD;;AACD,QAAIA,KAAK,GAAGjB,QAAQ,CAACO,IAAT,CAAcM,IAAd,CAAmBpW,KAAnB,CAAZ,EAAuC;AACrC,aAAO;AACL4C,QAAAA,CAAC,EAAE4T,KAAK,CAAC,CAAD,CADH;AAEL3T,QAAAA,CAAC,EAAE2T,KAAK,CAAC,CAAD,CAFH;AAGLrT,QAAAA,CAAC,EAAEqT,KAAK,CAAC,CAAD,CAHH;AAIL5V,QAAAA,CAAC,EAAE4V,KAAK,CAAC,CAAD;AAJH,OAAP;AAMD;;AACD,QAAIA,KAAK,GAAGjB,QAAQ,CAAC7S,GAAT,CAAa0T,IAAb,CAAkBpW,KAAlB,CAAZ,EAAsC;AACpC,aAAO;AACL4C,QAAAA,CAAC,EAAE4T,KAAK,CAAC,CAAD,CADH;AAEL3T,QAAAA,CAAC,EAAE2T,KAAK,CAAC,CAAD,CAFH;AAGL1T,QAAAA,CAAC,EAAE0T,KAAK,CAAC,CAAD;AAHH,OAAP;AAKD;;AACD,QAAIA,KAAK,GAAGjB,QAAQ,CAACQ,IAAT,CAAcK,IAAd,CAAmBpW,KAAnB,CAAZ,EAAuC;AACrC,aAAO;AACL4C,QAAAA,CAAC,EAAE4T,KAAK,CAAC,CAAD,CADH;AAEL3T,QAAAA,CAAC,EAAE2T,KAAK,CAAC,CAAD,CAFH;AAGL1T,QAAAA,CAAC,EAAE0T,KAAK,CAAC,CAAD,CAHH;AAIL5V,QAAAA,CAAC,EAAE4V,KAAK,CAAC,CAAD;AAJH,OAAP;AAMD;;AACD,QAAIA,KAAK,GAAGjB,QAAQ,CAACY,IAAT,CAAcC,IAAd,CAAmBpW,KAAnB,CAAZ,EAAuC;AACrC,aAAO;AACLM,QAAAA,CAAC,EAAE6U,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAN,CADb;AAELhW,QAAAA,CAAC,EAAE2U,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAN,CAFb;AAGL9V,QAAAA,CAAC,EAAEyU,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAN,CAHb;AAIL5V,QAAAA,CAAC,EAAE0U,mBAAmB,CAACkB,KAAK,CAAC,CAAD,CAAN,CAJjB;AAKLvV,QAAAA,MAAM,EAAEsV,KAAK,GAAG,MAAH,GAAY;AALpB,OAAP;AAOD;;AACD,QAAIC,KAAK,GAAGjB,QAAQ,CAACU,IAAT,CAAcG,IAAd,CAAmBpW,KAAnB,CAAZ,EAAuC;AACrC,aAAO;AACLM,QAAAA,CAAC,EAAE6U,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAN,CADb;AAELhW,QAAAA,CAAC,EAAE2U,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAN,CAFb;AAGL9V,QAAAA,CAAC,EAAEyU,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAN,CAHb;AAILvV,QAAAA,MAAM,EAAEsV,KAAK,GAAG,MAAH,GAAY;AAJpB,OAAP;AAMD;;AACD,QAAIC,KAAK,GAAGjB,QAAQ,CAACW,IAAT,CAAcE,IAAd,CAAmBpW,KAAnB,CAAZ,EAAuC;AACrC,aAAO;AACLM,QAAAA,CAAC,EAAE6U,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX,GAAgBA,KAAK,CAAC,CAAD,CAAtB,CADb;AAELhW,QAAAA,CAAC,EAAE2U,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX,GAAgBA,KAAK,CAAC,CAAD,CAAtB,CAFb;AAGL9V,QAAAA,CAAC,EAAEyU,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX,GAAgBA,KAAK,CAAC,CAAD,CAAtB,CAHb;AAIL5V,QAAAA,CAAC,EAAE0U,mBAAmB,CAACkB,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX,GAAgBA,KAAK,CAAC,CAAD,CAAtB,CAJjB;AAKLvV,QAAAA,MAAM,EAAEsV,KAAK,GAAG,MAAH,GAAY;AALpB,OAAP;AAOD;;AACD,QAAIC,KAAK,GAAGjB,QAAQ,CAACS,IAAT,CAAcI,IAAd,CAAmBpW,KAAnB,CAAZ,EAAuC;AACrC,aAAO;AACLM,QAAAA,CAAC,EAAE6U,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX,GAAgBA,KAAK,CAAC,CAAD,CAAtB,CADb;AAELhW,QAAAA,CAAC,EAAE2U,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX,GAAgBA,KAAK,CAAC,CAAD,CAAtB,CAFb;AAGL9V,QAAAA,CAAC,EAAEyU,eAAe,CAACqB,KAAK,CAAC,CAAD,CAAL,GAAW,EAAX,GAAgBA,KAAK,CAAC,CAAD,CAAtB,CAHb;AAILvV,QAAAA,MAAM,EAAEsV,KAAK,GAAG,MAAH,GAAY;AAJpB,OAAP;AAMD;;AACD,WAAO,KAAP;AACD;;AACD,WAAS/L,kBAAT,CAA4BiM,KAA5B,EAAmC;AACjC;AACA;AACA,QAAIhM,KAAJ,EAAWC,IAAX;AACA+L,IAAAA,KAAK,GAAGA,KAAK,IAAI;AACfhM,MAAAA,KAAK,EAAE,IADQ;AAEfC,MAAAA,IAAI,EAAE;AAFS,KAAjB;AAIAD,IAAAA,KAAK,GAAG,CAACgM,KAAK,CAAChM,KAAN,IAAe,IAAhB,EAAsBiM,WAAtB,EAAR;AACAhM,IAAAA,IAAI,GAAG,CAAC+L,KAAK,CAAC/L,IAAN,IAAc,OAAf,EAAwB4L,WAAxB,EAAP;;AACA,QAAI7L,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAhC,EAAuC;AACrCA,MAAAA,KAAK,GAAG,IAAR;AACD;;AACD,QAAIC,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,OAAjC,EAA0C;AACxCA,MAAAA,IAAI,GAAG,OAAP;AACD;;AACD,WAAO;AACLD,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA,IAAI,EAAEA;AAFD,KAAP;AAID;;AAED,SAAOnL,SAAP;AAED,CAlqCD","sourcesContent":["// This file is autogenerated. It's used to publish CJS to npm.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.tinycolor = factory());\n})(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n  }\n\n  // https://github.com/bgrins/TinyColor\n  // Brian Grinstead, MIT License\n\n  var trimLeft = /^\\s+/;\n  var trimRight = /\\s+$/;\n  function tinycolor(color, opts) {\n    color = color ? color : \"\";\n    opts = opts || {};\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n      return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n    var rgb = inputToRGB(color);\n    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) this._r = Math.round(this._r);\n    if (this._g < 1) this._g = Math.round(this._g);\n    if (this._b < 1) this._b = Math.round(this._b);\n    this._ok = rgb.ok;\n  }\n  tinycolor.prototype = {\n    isDark: function isDark() {\n      return this.getBrightness() < 128;\n    },\n    isLight: function isLight() {\n      return !this.isDark();\n    },\n    isValid: function isValid() {\n      return this._ok;\n    },\n    getOriginalInput: function getOriginalInput() {\n      return this._originalInput;\n    },\n    getFormat: function getFormat() {\n      return this._format;\n    },\n    getAlpha: function getAlpha() {\n      return this._a;\n    },\n    getBrightness: function getBrightness() {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function getLuminance() {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function setAlpha(value) {\n      this._a = boundAlpha(value);\n      this._roundA = Math.round(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function toHsv() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return {\n        h: hsv.h * 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this._a\n      };\n    },\n    toHsvString: function toHsvString() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = Math.round(hsv.h * 360),\n        s = Math.round(hsv.s * 100),\n        v = Math.round(hsv.v * 100);\n      return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n    },\n    toHsl: function toHsl() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return {\n        h: hsl.h * 360,\n        s: hsl.s,\n        l: hsl.l,\n        a: this._a\n      };\n    },\n    toHslString: function toHslString() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = Math.round(hsl.h * 360),\n        s = Math.round(hsl.s * 100),\n        l = Math.round(hsl.l * 100);\n      return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n    },\n    toHex: function toHex(allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function toHexString(allow3Char) {\n      return \"#\" + this.toHex(allow3Char);\n    },\n    toHex8: function toHex8(allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function toHex8String(allow4Char) {\n      return \"#\" + this.toHex8(allow4Char);\n    },\n    toRgb: function toRgb() {\n      return {\n        r: Math.round(this._r),\n        g: Math.round(this._g),\n        b: Math.round(this._b),\n        a: this._a\n      };\n    },\n    toRgbString: function toRgbString() {\n      return this._a == 1 ? \"rgb(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \")\" : \"rgba(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function toPercentageRgb() {\n      return {\n        r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n        g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n        b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n        a: this._a\n      };\n    },\n    toPercentageRgbString: function toPercentageRgbString() {\n      return this._a == 1 ? \"rgb(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function toName() {\n      if (this._a === 0) {\n        return \"transparent\";\n      }\n      if (this._a < 1) {\n        return false;\n      }\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function toFilter(secondColor) {\n      var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n      return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n    },\n    toString: function toString(format) {\n      var formatSet = !!format;\n      format = format || this._format;\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n      if (needsAlphaFormat) {\n        // Special case for \"transparent\", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === \"name\" && this._a === 0) {\n          return this.toName();\n        }\n        return this.toRgbString();\n      }\n      if (format === \"rgb\") {\n        formattedString = this.toRgbString();\n      }\n      if (format === \"prgb\") {\n        formattedString = this.toPercentageRgbString();\n      }\n      if (format === \"hex\" || format === \"hex6\") {\n        formattedString = this.toHexString();\n      }\n      if (format === \"hex3\") {\n        formattedString = this.toHexString(true);\n      }\n      if (format === \"hex4\") {\n        formattedString = this.toHex8String(true);\n      }\n      if (format === \"hex8\") {\n        formattedString = this.toHex8String();\n      }\n      if (format === \"name\") {\n        formattedString = this.toName();\n      }\n      if (format === \"hsl\") {\n        formattedString = this.toHslString();\n      }\n      if (format === \"hsv\") {\n        formattedString = this.toHsvString();\n      }\n      return formattedString || this.toHexString();\n    },\n    clone: function clone() {\n      return tinycolor(this.toString());\n    },\n    _applyModification: function _applyModification(fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function lighten() {\n      return this._applyModification(_lighten, arguments);\n    },\n    brighten: function brighten() {\n      return this._applyModification(_brighten, arguments);\n    },\n    darken: function darken() {\n      return this._applyModification(_darken, arguments);\n    },\n    desaturate: function desaturate() {\n      return this._applyModification(_desaturate, arguments);\n    },\n    saturate: function saturate() {\n      return this._applyModification(_saturate, arguments);\n    },\n    greyscale: function greyscale() {\n      return this._applyModification(_greyscale, arguments);\n    },\n    spin: function spin() {\n      return this._applyModification(_spin, arguments);\n    },\n    _applyCombination: function _applyCombination(fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function analogous() {\n      return this._applyCombination(_analogous, arguments);\n    },\n    complement: function complement() {\n      return this._applyCombination(_complement, arguments);\n    },\n    monochromatic: function monochromatic() {\n      return this._applyCombination(_monochromatic, arguments);\n    },\n    splitcomplement: function splitcomplement() {\n      return this._applyCombination(_splitcomplement, arguments);\n    },\n    // Disabled until https://github.com/bgrins/TinyColor/issues/254\n    // polyad: function (number) {\n    //   return this._applyCombination(polyad, [number]);\n    // },\n    triad: function triad() {\n      return this._applyCombination(polyad, [3]);\n    },\n    tetrad: function tetrad() {\n      return this._applyCombination(polyad, [4]);\n    }\n  };\n\n  // If input is an object, force 1 into \"1.0\" to handle ratios properly\n  // String input requires \"1.0\" as input, so 1 will be treated as 1\n  tinycolor.fromRatio = function (color, opts) {\n    if (_typeof(color) == \"object\") {\n      var newColor = {};\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === \"a\") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n      color = newColor;\n    }\n    return tinycolor(color, opts);\n  };\n\n  // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     \"red\"\n  //     \"#f00\" or \"f00\"\n  //     \"#ff0000\" or \"ff0000\"\n  //     \"#ff000000\" or \"ff000000\"\n  //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n  //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n  //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n  //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n  //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n  //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n  //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n  //\n  function inputToRGB(color) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color == \"string\") {\n      color = stringInputToObject(color);\n    }\n    if (_typeof(color) == \"object\") {\n      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = \"hsv\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = \"hsl\";\n      }\n      if (color.hasOwnProperty(\"a\")) {\n        a = color.a;\n      }\n    }\n    a = boundAlpha(a);\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: Math.min(255, Math.max(rgb.r, 0)),\n      g: Math.min(255, Math.max(rgb.g, 0)),\n      b: Math.min(255, Math.max(rgb.b, 0)),\n      a: a\n    };\n  }\n\n  // Conversion Functions\n  // --------------------\n\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255\n    };\n  }\n\n  // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n    var h,\n      s,\n      l = (max + min) / 2;\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n      h /= 6;\n    }\n    return {\n      h: h,\n      s: s,\n      l: l\n    };\n  }\n\n  // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  }\n\n  // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n    var h,\n      s,\n      v = max;\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n      h /= 6;\n    }\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  }\n\n  // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h),\n      f = h - i,\n      p = v * (1 - s),\n      q = v * (1 - f * s),\n      t = v * (1 - (1 - f) * s),\n      mod = i % 6,\n      r = [v, q, p, p, t, v][mod],\n      g = [t, v, v, q, p, p][mod],\n      b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  }\n\n  // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join(\"\");\n  }\n\n  // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join(\"\");\n  }\n\n  // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for \"toFilter()\"\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n    return hex.join(\"\");\n  }\n\n  // `equals`\n  // Can be called with any tinycolor input\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) return false;\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: Math.random(),\n      g: Math.random(),\n      b: Math.random()\n    });\n  };\n\n  // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n  function _desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n  function _saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n  function _greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n  function _lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n  function _brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n  function _darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n  function _spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  }\n\n  // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n  function _complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n  function polyad(color, number) {\n    if (isNaN(number) || number <= 0) {\n      throw new Error(\"Argument to polyad must be a positive number\");\n    }\n    var hsl = tinycolor(color).toHsl();\n    var result = [tinycolor(color)];\n    var step = 360 / number;\n    for (var i = 1; i < number; i++) {\n      result.push(tinycolor({\n        h: (hsl.h + i * step) % 360,\n        s: hsl.s,\n        l: hsl.l\n      }));\n    }\n    return result;\n  }\n  function _splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n  function _analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n    return ret;\n  }\n  function _monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n      s = hsv.s,\n      v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n    while (results--) {\n      ret.push(tinycolor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n    return ret;\n  }\n\n  // Utility Functions\n  // ---------------------\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return tinycolor(rgba);\n  };\n\n  // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n  };\n\n  // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n  // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n  // *Example*\n  //    tinycolor.isReadable(\"#000\", \"#111\") => false\n  //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n    out = false;\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case \"AAsmall\":\n      case \"AAAlarge\":\n        out = readability >= 4.5;\n        break;\n      case \"AAlarge\":\n        out = readability >= 3;\n        break;\n      case \"AAAsmall\":\n        out = readability >= 7;\n        break;\n    }\n    return out;\n  };\n\n  // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n    if (tinycolor.isReadable(baseColor, bestColor, {\n      level: level,\n      size: size\n    }) || !includeFallbackColors) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n    }\n  };\n\n  // Big List of Colors\n  // ------------------\n  // <https://www.w3.org/TR/css-color-4/#named-colors>\n  var names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n  };\n\n  // Make it easy to access colors via `hexNames[hex]`\n  var hexNames = tinycolor.hexNames = flip(names);\n\n  // Utilities\n  // ---------\n\n  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n  function flip(o) {\n    var flipped = {};\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n    return flipped;\n  }\n\n  // Return a valid alpha value [0,1] with all invalid values being set to 1\n  function boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n    return a;\n  }\n\n  // Take input from [0, n] and return it as [0, 1]\n  function bound01(n, max) {\n    if (isOnePointZero(n)) n = \"100%\";\n    var processPercent = isPercentage(n);\n    n = Math.min(max, Math.max(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return n % max / parseFloat(max);\n  }\n\n  // Force a number between 0 and 1\n  function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n  }\n\n  // Parse a base-16 hex value into a base-10 integer\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  }\n\n  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n  function isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n  }\n\n  // Check to see if string passed in is a percentage\n  function isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n  }\n\n  // Force a hex value to have 2 characters\n  function pad2(c) {\n    return c.length == 1 ? \"0\" + c : \"\" + c;\n  }\n\n  // Replace a decimal with it's percentage value\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + \"%\";\n    }\n    return n;\n  }\n\n  // Converts a decimal to a hex value\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  }\n  // Converts a hex value to a decimal\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n  var matchers = function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n      rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n      hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n      hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n      hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n      hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n  }();\n\n  // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  }\n\n  // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n    var named = false;\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == \"transparent\") {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: \"name\"\n      };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if (match = matchers.rgb.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3]\n      };\n    }\n    if (match = matchers.rgba.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hsl.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3]\n      };\n    }\n    if (match = matchers.hsla.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hsv.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3]\n      };\n    }\n    if (match = matchers.hsva.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hex8.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n    if (match = matchers.hex6.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n    if (match = matchers.hex4.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        a: convertHexToDecimal(match[4] + \"\" + match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n    if (match = matchers.hex3.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n    return false;\n  }\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\n      level: \"AA\",\n      size: \"small\"\n    };\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n      level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n      size = \"small\";\n    }\n    return {\n      level: level,\n      size: size\n    };\n  }\n\n  return tinycolor;\n\n}));\n"]},"metadata":{},"sourceType":"script"}